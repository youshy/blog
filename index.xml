<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Artur Kondas</title><link>/</link><description>Recent content on Artur Kondas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Go - Vim Setup For Dummies</title><link>/blog/go-vim-setup-for-dummies/</link><pubDate>Wed, 16 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/go-vim-setup-for-dummies/</guid><description>So, I did the Rust setup recently, so I&amp;rsquo;ve figured out I&amp;rsquo;ll do the one for Go as well (as I work with Go daily).
Getting Vim to work with Go Get Vim Install Go Install coc and vim-go with your favourite plugin manager Run in Vim: CocInstall coc-go - more info here Add to your .vimrc: &amp;#34; &amp;#34; Go setup &amp;#34; let g:go_fmt_command = &amp;#34;goimports&amp;#34; let g:go_gocode_propose_source = 0 let g:go_auto_type_info = 1 let g:go_version_warning = 0 Do you run your setup differently?</description><content>&lt;p>So, I did the &lt;a href="https://akondas.com/blog/Rust-Vim-Setup-For-Dummies">Rust setup&lt;/a> recently, so I&amp;rsquo;ve figured out I&amp;rsquo;ll do the one for Go as well (as I work with Go daily).&lt;/p>
&lt;h2 id="getting-vim-to-work-with-go">Getting Vim to work with Go&lt;/h2>
&lt;ol>
&lt;li>Get Vim&lt;/li>
&lt;li>Install &lt;a href="https://golang.org/dl/">Go&lt;/a>&lt;/li>
&lt;li>Install &lt;a href="https://github.com/neoclide/coc.nvim">coc&lt;/a> and &lt;a href="https://github.com/fatih/vim-go">vim-go&lt;/a> with your favourite &lt;a href="https://github.com/junegunn/vim-plug">plugin manager&lt;/a>&lt;/li>
&lt;li>Run in Vim: &lt;code>CocInstall coc-go&lt;/code> - more info &lt;a href="https://github.com/josa42/coc-go">here&lt;/a>&lt;/li>
&lt;li>Add to your &lt;code>.vimrc&lt;/code>:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span> Go setup
&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">let g:go_fmt_command = &amp;#34;&lt;/span>goimports&lt;span style="color:#e6db74">&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">let g:go_gocode_propose_source = 0
&lt;/span>&lt;span style="color:#e6db74">let g:go_auto_type_info = 1
&lt;/span>&lt;span style="color:#e6db74">let g:go_version_warning = 0
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Do you run your setup differently? Anything you would like to know more about? Hit me up on &lt;a href="https://www.linkedin.com/in/arturkondas/">linkedin&lt;/a>!&lt;/p></content></item><item><title>Rust - Vim Setup For Dummies</title><link>/blog/rust-vim-setup-for-dummies/</link><pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate><guid>/blog/rust-vim-setup-for-dummies/</guid><description>Before any Gopher will start yell at me - no, I&amp;rsquo;m not bailing on Go, I&amp;rsquo;m just checking what other options I can have to build VSTs instead of C++&amp;hellip;
Getting Vim to work with Rust I&amp;rsquo;ll try to be as quick as possible here:
Get Vim (no doy&amp;hellip;) Install Rust Install coc and rust vim with your favourite plugin manager Install Rust-analyzer Run in Vim: CocInstall coc-rust-analyzer - more info here Add let g:rustfmt_autosave = 1 to your .</description><content>&lt;p>Before any Gopher will start yell at me - no, I&amp;rsquo;m not bailing on Go, I&amp;rsquo;m just checking what other options I can have to build VSTs instead of C++&amp;hellip;&lt;/p>
&lt;h2 id="getting-vim-to-work-with-rust">Getting Vim to work with Rust&lt;/h2>
&lt;p>I&amp;rsquo;ll try to be as quick as possible here:&lt;/p>
&lt;ol>
&lt;li>Get Vim (no doy&amp;hellip;)&lt;/li>
&lt;li>Install &lt;a href="https://www.rust-lang.org/learn/get-started">Rust&lt;/a>&lt;/li>
&lt;li>Install &lt;a href="https://github.com/neoclide/coc.nvim">coc&lt;/a> and &lt;a href="https://github.com/rust-lang/rust.vim">rust vim&lt;/a> with your favourite &lt;a href="https://github.com/junegunn/vim-plug">plugin manager&lt;/a>&lt;/li>
&lt;li>Install &lt;a href="https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary">Rust-analyzer&lt;/a>&lt;/li>
&lt;li>Run in Vim: &lt;code>CocInstall coc-rust-analyzer&lt;/code> - more info &lt;a href="https://rust-analyzer.github.io/manual.html#vimneovim">here&lt;/a>&lt;/li>
&lt;li>Add &lt;code>let g:rustfmt_autosave = 1&lt;/code> to your &lt;code>.vimrc&lt;/code> to run &lt;code>rustfmt&lt;/code> (autoformatting) on save&lt;/li>
&lt;/ol>
&lt;p>At step 5, Vim might ask you to install some extra stuff - just roll with it!&lt;/p>
&lt;p>If you have any questions, suggestions or anything else - grab me on &lt;a href="https://www.linkedin.com/in/arturkondas/">linkedin&lt;/a>!&lt;/p></content></item><item><title>Diversity-Inclusion-and-Everything-In-Between</title><link>/blog/diversity-inclusion-and-everything-in-between/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>/blog/diversity-inclusion-and-everything-in-between/</guid><description>Before I&amp;rsquo;ll jump into the topic, as you can see this is my first post since a while. A lot of stuff has happened, most of them good - hope that your personal Apocalypse Now has been, at least a bit, good for you!
Every now and then, there&amp;rsquo;s a new big &amp;ldquo;gamechanger&amp;rdquo; in the tech world. A few years ago it was Agile ways of working, not so far ago it was CI/CD, small, yet stable changes (so basically Agile v2) - now it&amp;rsquo;s diversity, inclusion and equity.</description><content>&lt;p>Before I&amp;rsquo;ll jump into the topic, as you can see this is my first post since a while. A lot of stuff has happened, most of them good - hope that your personal Apocalypse Now has been, at least a bit, good for you!&lt;/p>
&lt;hr>
&lt;p>Every now and then, there&amp;rsquo;s a new big &amp;ldquo;gamechanger&amp;rdquo; in the tech world. A few years ago it was Agile ways of working, not so far ago it was CI/CD, small, yet stable changes (so basically Agile v2) - now it&amp;rsquo;s diversity, inclusion and equity. The issue is, same as it was with Agile and everything after - in my opinion, it&amp;rsquo;s widely misunderstood how it should work.&lt;/p>
&lt;p>Before you start commenting and saying &amp;ldquo;You&amp;rsquo;re a white male in Europe, what do you know about diversity and equity?&amp;rdquo;, hear me out. Also, these are my thoughts only and you&amp;rsquo;re more than welcome to disagree with them (or agree!) - I&amp;rsquo;d love to have some constructive discussion about the topic!&lt;/p>
&lt;h1 id="diversity-is-widely-misunderstood">Diversity is widely misunderstood&lt;/h1>
&lt;p>And that comes down to what&amp;rsquo;s the most clickable or most controversial. Diversity in tech is mostly understood as race and gender - what about nationality and religion? Why most of the companies cut the &amp;ldquo;tough&amp;rdquo; topics from their handbooks and go for the low-hanging fruit?&lt;/p>
&lt;p>Why diversity doesn&amp;rsquo;t take into consideration age or willingness to become a parent?
Why it&amp;rsquo;s so hard for the older folks to break into the new companies or into new life ventures?
Why if you want to be a parent, you only get mere 6 weeks of full pay (in most places) and then you&amp;rsquo;re basically on your own?
Why if you&amp;rsquo;re back from maternity there&amp;rsquo;s nothing set up to ease you back into the work?&lt;/p>
&lt;p>At this point, you can&amp;rsquo;t pivot your career over the course of a few weeks/months - you have to drop everything and just YOLO into the new venture. Will it pay off? Will it work? Who the fuck knows.&lt;/p>
&lt;p>Having a kid? Yes, let&amp;rsquo;s do that, but don&amp;rsquo;t count on your work to treat you fairly just because you want to be a parent.&lt;/p>
&lt;h1 id="equity-for-boomers">Equity for boomers&lt;/h1>
&lt;p>Although the word &amp;ldquo;boomer&amp;rdquo; can be taken negatively, it&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Baby_boomers">perfectly okay to use it&lt;/a> - why people can bash Millenials (or any other generation for this matter) and it&amp;rsquo;s acceptable?
Why some companies still require your photo on the resume? Why does it even matter?
Why some companies won&amp;rsquo;t even talk to you if you have tattoos? Or start schooling you, that you won&amp;rsquo;t get a job because you have something on your hands? (been there, walked out of the interview)&lt;/p>
&lt;p>Or, my favourite one recently:&lt;/p>
&lt;p>How come remote/flexible working is bad for productivity and you have to be back in the office because of the &amp;ldquo;company culture&amp;rdquo;? If company culture is so important, why don&amp;rsquo;t you trust me with my work? Why do you want to introduce &amp;ldquo;productivity checkers&amp;rdquo;? Why do you need to monitor the time I spend over the piece of work? Is the time the value you&amp;rsquo;re looking for?&lt;/p>
&lt;p>Maybe the remote work isn&amp;rsquo;t the issue, maybe the real issue is your trust?&lt;/p>
&lt;h1 id="nothing-in-the-middle">Nothing in the middle&lt;/h1>
&lt;p>If you look at it, everything has to be blown out of proportion these days - you&amp;rsquo;re either inclusive as hell or not at all. Well, I personally believe, that if you had to set up a whole division in your company that will deal with inclusion, you&amp;rsquo;re either chasing trends or you had a MASSIVE problem from the very beginning.&lt;/p>
&lt;p>The middle would be looking at what we do, where we want to get and how can we do that - not setting up a new team in the company that&amp;rsquo;ll move the one indicator up 3% because you&amp;rsquo;ve hired 2 more people from a minority group but fixing tensions in your teams, because one of the team members is passive-aggressive all the time and that&amp;rsquo;s the way they get shit done. Can you see the problem?&lt;/p>
&lt;h1 id="start-from-the-beginning">Start from the beginning&lt;/h1>
&lt;p>I don&amp;rsquo;t have all the answers - hell, I don&amp;rsquo;t have any. I&amp;rsquo;ll never know how it is to be not allowed to achieve something just because of the colour of my skin or because I don&amp;rsquo;t believe in your gods. But what I think might help, is a bit more being human in this post-capitalistic world.&lt;/p>
&lt;p>Start with listening to the people you have in your company now. How do you want to be inclusive when you still have problems in your company? How do you want to be diverse if one person FORCES their view upon others?&lt;/p>
&lt;p>Start with trusting your employees. How do you want to give equal opportunities when you &amp;ldquo;need to see your team on a daily basis to see if they&amp;rsquo;re doing their job&amp;rdquo;? Why work from home/flexible working is a bad thing if you get work done?&lt;/p>
&lt;p>Start with supporting your teams in every part of their lives. You call yourself a &amp;ldquo;family&amp;rdquo; within the company, yet you disregard extra pay for pregnant women or giving one extra day for &amp;ldquo;unexpected&amp;rdquo; stuff - I don&amp;rsquo;t know, emergency moving houses. Or your dog&amp;rsquo;s diarrhoea. It won&amp;rsquo;t kill your business, yet your employee will feel MUCH better knowing, that when shit hits the fan, they don&amp;rsquo;t have to worry about today&amp;rsquo;s standup.&lt;/p>
&lt;p>And I guess the most important stuff - change your hiring process. Make it more humane. If you&amp;rsquo;re not working for FAANG or for high-volume financial sector, you won&amp;rsquo;t have to know all the algorithms inside out. Do you want to have smart people in your company? Give them interesting problems to solve and see how they approach it.
Everybody can google &amp;ldquo;most efficient sorting algorithm&amp;rdquo; but not everybody can figure out how one, minuscule change in your application can improve it in terms of readability and usability. Try to get to know the candidate and not treat them as yet another number in your book.&lt;/p>
&lt;h1 id="it-all-starts-with-you">It all starts with YOU&lt;/h1>
&lt;p>I&amp;rsquo;ve ranted about the companies, now I&amp;rsquo;ll rant about you.&lt;/p>
&lt;p>If you want your company to change, what have you done to make the change? Speak up! Nobody will know that you&amp;rsquo;re miserable if you won&amp;rsquo;t say it. If you&amp;rsquo;re scared, that you&amp;rsquo;ll have issues after you speak up, maybe that&amp;rsquo;s not the company you want to work for? If they don&amp;rsquo;t allow any dialogue to happen, what does that say about them?&lt;/p>
&lt;p>If you want your company to be more inclusive, what have you done about it? Instead of talking smack about your peers, why not swallow your pride and helping them find, what you consider, a better way of working? Why not engage in the discussion?&lt;/p>
&lt;p>If you want your company to grow, have you help somebody to grow? Don&amp;rsquo;t treat everybody as &amp;ldquo;THEY WANT TO TAKE MY JOB, I NEED TO BE THE BEST&amp;rdquo;. Life&amp;rsquo;s not a Pokemon game, you don&amp;rsquo;t have to catch them all. Spend some time to teach your peers something new, help them with something and most important - get to know them, just a bit.
Life is not all about you, people go through all kinds of shit ALL THE TIME. Maybe the code that broke the production was written when they had a really bad day? Instead of going &amp;ldquo;IT&amp;rsquo;S XXXX FAULT&amp;rdquo;, be blameless. Help them, instead of judging them.&lt;/p>
&lt;h1 id="be-more-humane">Be more humane&lt;/h1>
&lt;p>I wasn&amp;rsquo;t the greatest and the most inclusive human being from the start - I have my fair share of days when I was just a shitty person. But I was lucky enough to find people, that helped me to find my own shortcomings and work on them.&lt;/p>
&lt;p>I have been lucky enough to help with two editions of &lt;a href="https://www.colorintech.org/">Colorintech&lt;/a> events - and, in my opinion, this is Diversity &amp;amp; Inclusion done right - they&amp;rsquo;re not writing empty blogposts (&amp;hellip;) and nothing else - they go above and beyond to help people from minorities kick-start their careers in tech.
I&amp;rsquo;ve helped with &lt;a href="https://codefirstgirls.org.uk/">Code First: Girls&lt;/a> events - which, honestly, for me, was one of the most fun things I&amp;rsquo;ve done EVER - by the way, I&amp;rsquo;ll be like Samuel L Jackson in Pulp Fiction if I&amp;rsquo;ll find out about another company that pays women less or forces them to work from the office just because they are &lt;a href="https://www.tuc.org.uk/news/employers-are-breaking-law-and-forcing-pregnant-women-out-work-during-pandemic-warns-tuc">&amp;ldquo;getting pregnant&amp;rdquo;&lt;/a>.&lt;/p>
&lt;h1 id="change-is-imminent-">Change is imminent (?)&lt;/h1>
&lt;p>2020, in my opinion, basically made the inevitable change of the current workspace a reality. In my head, that&amp;rsquo;s a good thing, because it shows who&amp;rsquo;s actually caring about their employees and who&amp;rsquo;s willing to change. &lt;a href="https://www.bbc.co.uk/news/business-56452494">There&amp;rsquo;s no work that requires 80 hours per week&lt;/a> and &lt;a href="https://www.bbc.co.uk/news/business-56192048">there&amp;rsquo;s no new normal, there&amp;rsquo;s change&lt;/a>.&lt;/p>
&lt;p>Work was always about people, working from home doesn&amp;rsquo;t change that. It doesn&amp;rsquo;t change people needs - they still want to be trusted and be allowed to evolve. You want to be inclusive and diverse? Start with yourself, then with what you currently have, then with the future.&lt;/p>
&lt;p>Maybe it&amp;rsquo;s time that instead of trying to chase the rabbit with $ in its eyes and filling up yet another excel chart about productivity, we start to think about how we feel about work. Change starts with us, not with the big money.&lt;/p>
&lt;p>Trust and be trustworthy.&lt;/p>
&lt;p>Help and don&amp;rsquo;t be ashamed when you need help as well.&lt;/p>
&lt;p>Be human.&lt;/p>
&lt;p>/ rant over.&lt;/p></content></item><item><title>How To Write A Music Video In Go</title><link>/blog/how-to-write-a-music-video-in-go/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>/blog/how-to-write-a-music-video-in-go/</guid><description>TL;DR: My band ENAEhas released a first single, called The System. Song is 100% DIY (from writing to recording to mixing to producing to releasing) and the music video is written 100% in Go!
Table of Contents:
Intro Why would you program a music video? Where to start? Getting the sound Getting the first characters to print Rhythm Binary solo Last scene Where to go from now? I always had a soft spot for interesting movies.</description><content>&lt;p>TL;DR: My band &lt;!-- raw HTML omitted -->ENAE&lt;!-- raw HTML omitted --> has released a first single, called &lt;!-- raw HTML omitted -->The System&lt;!-- raw HTML omitted -->. Song is 100% DIY (from writing to recording to mixing to producing to releasing) and the music video is written 100% in Go!&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Table of Contents:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#Intro">Intro&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Why">Why would you program a music video?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Where">Where to start?&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Sound">Getting the sound&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Print">Getting the first characters to print&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Rhythm">Rhythm&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Binary">Binary solo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Last">Last scene&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Where">Where to go from now?&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;p>I always had a soft spot for interesting movies. Of course, I like the good story as much as the next guy, but the visual aspect can make me fall in love with a movie. I won&amp;rsquo;t even count how many times I&amp;rsquo;ve watched Guy Richie&amp;rsquo;s Sherlock Holmes (both movies actually), What We Do In The Shadows, Blade Runner or anything by Quentin Tarantino.&lt;/p>
&lt;p>One thing that glues all of these movies together is that they do something really fresh from the very beginning - apart of the great story, they push the limit of visual aspect.&lt;/p>
&lt;p>And I wanted to do the same with first &lt;!-- raw HTML omitted -->ENAE&lt;!-- raw HTML omitted --> single. I&amp;rsquo;m a DIY guy and the visual aspect of things isn&amp;rsquo;t my strongest suit so, being a dev, what can I do?&lt;/p>
&lt;p>Well, I can program the nerdiest music video you have seen so far.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Because I can.&lt;/p>
&lt;p>No, really, this is the major thing why I&amp;rsquo;ve done it. I&amp;rsquo;ve thought that going nerdy and seeing how far I can push my knowledge about some stuff will be a fun project. Also I needed an excuse to brush off my sight reading and music transcription skills!&lt;/p>
&lt;p>Before we go any further, I recommend watching &lt;!-- raw HTML omitted -->The Video&lt;!-- raw HTML omitted -->. so we&amp;rsquo;ll set the playing field - I&amp;rsquo;ll refer to it a few times!&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>There&amp;rsquo;s three parts to getting the song ready to be programmed:&lt;/p>
&lt;ul>
&lt;li>First, sheet notation of your song. Helps with the timings and you don&amp;rsquo;t have to do the math yourself;&lt;/li>
&lt;li>Second, lyrics. Basically, what I&amp;rsquo;ve made is a more complicated lyrics video;&lt;/li>
&lt;li>Third, final mix version. As the timings might change, you don&amp;rsquo;t want to redo the whole video because your mix has changed.&lt;/li>
&lt;/ul>
&lt;p>I&amp;rsquo;ve started mocking the video a long before we&amp;rsquo;ve finished the final mix, but I&amp;rsquo;ve started actual programming literally the day we&amp;rsquo;ve agreed on the mix.&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Getting the sound was actually the easiest bit - I&amp;rsquo;ve used &lt;!-- raw HTML omitted -->Beep by Faiface&lt;!-- raw HTML omitted --> in it&amp;rsquo;s most raw form:&lt;/p>
&lt;p>&lt;strong>player.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/faiface/beep&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/faiface/beep/mp3&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;github.com/faiface/beep/speaker&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">play&lt;/span>(&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;span style="color:#75715e">// Prepare the song to play
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;./enae-the_system.mp3&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">streamer&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">mp3&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">streamer&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;span style="color:#a6e22e">speaker&lt;/span>.&lt;span style="color:#a6e22e">Init&lt;/span>(&lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">SampleRate&lt;/span>, &lt;span style="color:#a6e22e">format&lt;/span>.&lt;span style="color:#a6e22e">SampleRate&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Second&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>))
&lt;span style="color:#a6e22e">speaker&lt;/span>.&lt;span style="color:#a6e22e">Play&lt;/span>(&lt;span style="color:#a6e22e">beep&lt;/span>.&lt;span style="color:#a6e22e">Seq&lt;/span>(&lt;span style="color:#a6e22e">streamer&lt;/span>, &lt;span style="color:#a6e22e">beep&lt;/span>.&lt;span style="color:#a6e22e">Callback&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
})))
&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">done&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>done&lt;/code> is the channel I use to notify the main goroutine that play/print has finished. As it&amp;rsquo;s a music video, high-quality mp3 file is sufficient enough to be lightweight and good sounding.&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The main file, that deals with all the things to print is, unsurprisingly, &lt;code>printer.go&lt;/code>. Let&amp;rsquo;s break it down:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#75715e">// notes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">fullnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">1678&lt;/span>
&lt;span style="color:#a6e22e">halfnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">839&lt;/span>
&lt;span style="color:#a6e22e">quaternote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">420&lt;/span>
&lt;span style="color:#a6e22e">eightnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">210&lt;/span>
&lt;span style="color:#a6e22e">sixteenthnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">105&lt;/span>
&lt;span style="color:#a6e22e">thirtysecondnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">52&lt;/span>
&lt;span style="color:#a6e22e">sixtyfourthnote&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> = &lt;span style="color:#ae81ff">26&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to be able to print stuff properly, you need to get a tempo of the song and the duration of each note in milliseconds. The formula to do that is really simple:&lt;/p>
&lt;blockquote>
&lt;p>60000 / BPM = one beat in millisecond&lt;/p>
&lt;/blockquote>
&lt;p>BPM (Beats per minute) is the song tempo, one beat refers to a quater note. So, in case of &lt;em>The System&lt;/em>, where the BPM is 143, it&amp;rsquo;s:&lt;/p>
&lt;blockquote>
&lt;p>60000 / 143 = 420 (rounded up)&lt;/p>
&lt;/blockquote>
&lt;p>This way, I&amp;rsquo;ve calculated all necessary note durations that I&amp;rsquo;ll need to print.&lt;/p>
&lt;p>Moving on:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Sized&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">printer&lt;/span>(&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>{}
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">height&lt;/span> = &lt;span style="color:#a6e22e">checkTerminalSize&lt;/span>()
&lt;span style="color:#75715e">// intro
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">intro&lt;/span>()
&lt;span style="color:#75715e">// verse 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">verse1&lt;/span>()
&lt;span style="color:#75715e">// chorus 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">chorusBig1&lt;/span>()
&lt;span style="color:#a6e22e">chorusBig1&lt;/span>()
&lt;span style="color:#a6e22e">overAndOver&lt;/span>()
&lt;span style="color:#a6e22e">chorusBig1&lt;/span>()
&lt;span style="color:#75715e">// verse 2
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">verse2&lt;/span>()
&lt;span style="color:#75715e">// chorus 2 - ends faster and starts loading bar
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">chorusBig1&lt;/span>()
&lt;span style="color:#a6e22e">chorusBig1&lt;/span>()
&lt;span style="color:#a6e22e">overAndOver&lt;/span>()
&lt;span style="color:#a6e22e">chorusSmall1&lt;/span>()
&lt;span style="color:#75715e">// solo
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">solo&lt;/span>()
&lt;span style="color:#75715e">// chorus 3 - can&amp;#39;t feel, can see...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">lastChorus&lt;/span>()
&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">done&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We&amp;rsquo;ll touch on &lt;code>Sized&lt;/code> struct a while later; for now, you can see how the song was built.&lt;/p>
&lt;p>I&amp;rsquo;ve divided the chorus into 4 small chunks (in case I want to change only a part of it). &lt;code>verse1&lt;/code> and &lt;code>verse2&lt;/code> are a tiny bit different in the approach - one is typewriting (printing one character per x milliseconds), second one is Star-Wars-esque &amp;ldquo;Text is going up&amp;rdquo; using frames.&lt;/p>
&lt;p>Before we go into the rhythm part of the music video, there are three very important functions in &lt;code>printer.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">cleanDisplay&lt;/span>() {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[2J&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">row&lt;/span>, &lt;span style="color:#a6e22e">col&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[%d;%df&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">row&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">col&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">note&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">note&lt;/span>))
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we delve into the nitty-gritty of the whole system - &lt;a href="https://en.wikipedia.org/wiki/ANSI_escape_code">Ansi escape codes&lt;/a>. In case of my music video, I&amp;rsquo;ve used a few:&lt;/p>
&lt;p>in &lt;code>printer.go&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>\x1b[2J&lt;/code> - all escape codes starts with &lt;code>\x1b&lt;/code>, which is ASCII representation of ESC. &lt;code>[2J&lt;/code> means to clear the whole display;&lt;/li>
&lt;li>&lt;code>\x1b[%d;%df&lt;/code> - &lt;code>[%d;%df&lt;/code> moves the cursor to a given position&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>We&amp;rsquo;ll talk about noteRest in a second!&lt;/p>
&lt;/blockquote>
&lt;p>in &lt;code>colours.go&lt;/code>:&lt;/p>
&lt;p>(First, let&amp;rsquo;s bring the functions here)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">resetColourChanges&lt;/span>() {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Print&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[0m&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>as the function name says, it reset colour changes to default;&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">colourText&lt;/span>(&lt;span style="color:#a6e22e">colour&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">bright&lt;/span> &lt;span style="color:#66d9ef">bool&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">bright&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[9%vm&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">colour&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[3%vm&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">colour&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>colourText&lt;/code> is a wrapper around printing from basic palette of 8 colours (black, red, green, yellow, blue, magenta, cyan and white) in bright (&lt;code>[9&lt;/code>) variant or in normal - let&amp;rsquo;s call it plain (&lt;code>[3&lt;/code>);&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">colourTextRGB&lt;/span>(&lt;span style="color:#a6e22e">red&lt;/span>, &lt;span style="color:#a6e22e">green&lt;/span>, &lt;span style="color:#a6e22e">blue&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;\x1b[38;2;%v;%v;%vm&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">red&lt;/span>, &lt;span style="color:#a6e22e">green&lt;/span>, &lt;span style="color:#a6e22e">blue&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is the function I ended up using - I&amp;rsquo;ve found a way to print the colours using RGB values - the loading bar you see before the solo starts is done using this magical thing!&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Remember &lt;code>noteRest&lt;/code>? It&amp;rsquo;s nothing else than a wrapper around &lt;code>time.Sleep&lt;/code>. To print time-based frames, I used &lt;code>printInMicroseconds&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">printInMicroseconds&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">spd&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#a6e22e">speed&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">spd&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;span style="color:#a6e22e">freq&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (float64(&lt;span style="color:#a6e22e">speed&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> float64(len(&lt;span style="color:#a6e22e">s&lt;/span>)))
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">s&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%v&amp;#34;&lt;/span>, string(&lt;span style="color:#a6e22e">s&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]))
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Microsecond&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">freq&lt;/span>))
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Why &lt;em>Microseconds&lt;/em> instead of &lt;em>Milliseconds&lt;/em> you ask? The reason for that is sometimes the lyrics aren&amp;rsquo;t really divisible by the millisecond duration of the note in a nice fashion. That&amp;rsquo;s why, I&amp;rsquo;m converting milliseconds to microseconds and then printing. Check &lt;code>verse1.go&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">verse1&lt;/span>() {
&lt;span style="color:#a6e22e">printInMicroseconds&lt;/span>(&lt;span style="color:#a6e22e">verse1_1_1&lt;/span>, &lt;span style="color:#a6e22e">halfnote&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">quaternote&lt;/span>) &lt;span style="color:#75715e">// 3/1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">printInMicroseconds&lt;/span>(&lt;span style="color:#a6e22e">verse1_1_2&lt;/span>, &lt;span style="color:#a6e22e">quaternote&lt;/span>) &lt;span style="color:#75715e">// 1/1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sometimes some part of the lyrics will have to stay longer than pre-defined note duration. Because notes in the code are &lt;code>int&lt;/code>, we can add them and then the function takes care of it!&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;p>And now,&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>This is the part, I think, I&amp;rsquo;m most proud of. The function:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>) &lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#a6e22e">note&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">speed&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">toBinary&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">note&lt;/span> {
&lt;span style="color:#a6e22e">toBinary&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%b &amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>)
}
&lt;span style="color:#a6e22e">freq&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (float64(&lt;span style="color:#a6e22e">speed&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> float64(len(&lt;span style="color:#a6e22e">toBinary&lt;/span>))) &lt;span style="color:#75715e">// to microseconds
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">toBinary&lt;/span> {
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;%c&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>)
&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Millisecond&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#a6e22e">freq&lt;/span>))
}
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>()
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function itself is nothing crazy, but the approach to printing is:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// 1st bar
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fullnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;F&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fullnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;G&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">halfnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">halfnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fullnote&lt;/span>)
&lt;span style="color:#a6e22e">cleanDisplay&lt;/span>()
&lt;span style="color:#75715e">// 2nd bar
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">eightnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;A&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sixteenthnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;C&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sixteenthnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;D&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">eightnote&lt;/span>)
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">printNoteInBinary&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;G&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">quaternote&lt;/span>)
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember at the beginning, I&amp;rsquo;ve told that we&amp;rsquo;d need a sheet music? Without that, programming this solo would be extremely painful. Each note gets converted to a binary representation and then gets printed within the note duration.&lt;/p>
&lt;blockquote>
&lt;p>You might notice, that there&amp;rsquo;s a pointer to &lt;code>Sized&lt;/code> here - reason for that is, I&amp;rsquo;ve iterated over multiple versions of the solo and thought the one now is the best looking one. In case someone would like to print it anywhere else on the screen, they can, because they know the terminal size already!&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>The last scene is an interesting one, because there&amp;rsquo;s a very small chance that it&amp;rsquo;ll look the same ever.&lt;/p>
&lt;p>Each time you run this music video in the terminal, it&amp;rsquo;ll be different, because the &amp;ldquo;frame cleanup&amp;rdquo; is truly randomized. I&amp;rsquo;ve spent a while thinking about how to pull this off and went with this:&lt;/p>
&lt;ul>
&lt;li>I&amp;rsquo;ve prepared nice ASCII art of the last chorus&lt;/li>
&lt;li>Then I&amp;rsquo;ve formatted it&lt;/li>
&lt;li>Populated the display with &lt;code>:&lt;/code>&lt;/li>
&lt;li>The randomly destroyed what I need&lt;/li>
&lt;/ul>
&lt;p>Sounds easy? Once I had figured it out, it actually was! So, let&amp;rsquo;s take a closer look at the functions:&lt;/p>
&lt;blockquote>
&lt;p>All functions are in chorus_last.go&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>) &lt;span style="color:#a6e22e">formatLine&lt;/span>(&lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">RoundToEven&lt;/span>((float64(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span>) &lt;span style="color:#f92672">-&lt;/span> float64(len(&lt;span style="color:#a6e22e">str&lt;/span>))) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>))
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span>, &lt;span style="color:#a6e22e">post&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">add&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">post&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>
}
&lt;span style="color:#a6e22e">f&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pre&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">post&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">f&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span> {
&lt;span style="color:#a6e22e">f&lt;/span> = &lt;span style="color:#a6e22e">f&lt;/span>[:len(&lt;span style="color:#a6e22e">f&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>]
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">f&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As each display will be different, the art needs to be formatted - which basically means adding &lt;code>:&lt;/code> at the beginning and the end until the whole width of the display is used.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>) &lt;span style="color:#a6e22e">generateLine&lt;/span>(&lt;span style="color:#a6e22e">char&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">char&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">str&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>) &lt;span style="color:#a6e22e">generateDisplay&lt;/span>(&lt;span style="color:#a6e22e">char&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">strArr&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">height&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">str&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">generateLine&lt;/span>(&lt;span style="color:#a6e22e">char&lt;/span>)
&lt;span style="color:#a6e22e">strArr&lt;/span> = append(&lt;span style="color:#a6e22e">strArr&lt;/span>, &lt;span style="color:#a6e22e">str&lt;/span>)
}
&lt;span style="color:#a6e22e">temp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">strArr&lt;/span>[:], &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">printInMicroseconds&lt;/span>(&lt;span style="color:#a6e22e">temp&lt;/span>, &lt;span style="color:#a6e22e">eightnote&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, we need something to populate the whole display with &lt;code>:&lt;/code> - which means generating some lines and then creating an array which will be of full terminal dimension.&lt;/p>
&lt;p>And now, the last behemoth:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Sized&lt;/span>) &lt;span style="color:#a6e22e">lastChorus&lt;/span>() {
&lt;span style="color:#a6e22e">cleanDisplay&lt;/span>()
&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">generateDisplay&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">maxHeight&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">32&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#66d9ef">var&lt;/span> (
&lt;span style="color:#a6e22e">iter&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
)
&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">eightnote&lt;/span>)
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">maxHeight&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">banners&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">maxHeight&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">iter&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">formatLine&lt;/span>(&lt;span style="color:#a6e22e">banners&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]))
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">==&lt;/span> (len(&lt;span style="color:#a6e22e">banners&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span> {
&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">eightnote&lt;/span>)
&lt;span style="color:#a6e22e">iter&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;span style="color:#66d9ef">continue&lt;/span>
}
&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">thirtysecondnote&lt;/span>)
&lt;span style="color:#a6e22e">iter&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
}
&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">fullnote&lt;/span>)
&lt;span style="color:#a6e22e">rest&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>
&lt;span style="color:#a6e22e">maxMilliseconds&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int(&lt;span style="color:#a6e22e">math&lt;/span>.&lt;span style="color:#a6e22e">RoundToEven&lt;/span>(float64(&lt;span style="color:#ae81ff">16&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">fullnote&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> float64(&lt;span style="color:#a6e22e">rest&lt;/span>)))
&lt;span style="color:#a6e22e">source&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">NewSource&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>().&lt;span style="color:#a6e22e">UnixNano&lt;/span>())
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">maxMilliseconds&lt;/span>; &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;span style="color:#a6e22e">randban&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">source&lt;/span>).&lt;span style="color:#a6e22e">Intn&lt;/span>(len(&lt;span style="color:#a6e22e">banners&lt;/span>))
&lt;span style="color:#a6e22e">banner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">banners&lt;/span>[&lt;span style="color:#a6e22e">randban&lt;/span>]
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#a6e22e">randban&lt;/span> {
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>, &lt;span style="color:#ae81ff">9&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>, &lt;span style="color:#ae81ff">11&lt;/span>, &lt;span style="color:#ae81ff">12&lt;/span>, &lt;span style="color:#ae81ff">13&lt;/span>, &lt;span style="color:#ae81ff">14&lt;/span>, &lt;span style="color:#ae81ff">15&lt;/span>:
&lt;span style="color:#75715e">// want to get &amp;#34;your&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">banner&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#a6e22e">randpos&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">source&lt;/span>).&lt;span style="color:#a6e22e">Intn&lt;/span>(&lt;span style="color:#a6e22e">mid&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">changedBanner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[:&lt;span style="color:#a6e22e">randpos&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[&lt;span style="color:#a6e22e">randpos&lt;/span>:]
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">maxHeight&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">randban&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">formatLine&lt;/span>(&lt;span style="color:#a6e22e">changedBanner&lt;/span>))
&lt;span style="color:#a6e22e">banners&lt;/span>[&lt;span style="color:#a6e22e">randban&lt;/span>] = &lt;span style="color:#a6e22e">changedBanner&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#ae81ff">24&lt;/span>, &lt;span style="color:#ae81ff">25&lt;/span>, &lt;span style="color:#ae81ff">26&lt;/span>, &lt;span style="color:#ae81ff">27&lt;/span>, &lt;span style="color:#ae81ff">28&lt;/span>, &lt;span style="color:#ae81ff">29&lt;/span>, &lt;span style="color:#ae81ff">30&lt;/span>, &lt;span style="color:#ae81ff">31&lt;/span>:
&lt;span style="color:#75715e">// we&amp;#39;re leaving the &amp;#34;face&amp;#34; out, thus middle of the banner
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">banner&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#a6e22e">randpos&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">source&lt;/span>).&lt;span style="color:#a6e22e">Intn&lt;/span>(&lt;span style="color:#a6e22e">mid&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">changedBanner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[:&lt;span style="color:#a6e22e">randpos&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[&lt;span style="color:#a6e22e">randpos&lt;/span>:]
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">maxHeight&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">randban&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">formatLine&lt;/span>(&lt;span style="color:#a6e22e">changedBanner&lt;/span>))
&lt;span style="color:#a6e22e">banners&lt;/span>[&lt;span style="color:#a6e22e">randban&lt;/span>] = &lt;span style="color:#a6e22e">changedBanner&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;span style="color:#75715e">// we don&amp;#39;t want 0 here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">randpos&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">source&lt;/span>).&lt;span style="color:#a6e22e">Intn&lt;/span>(len(&lt;span style="color:#a6e22e">banner&lt;/span>)&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#a6e22e">changedBanner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[:&lt;span style="color:#a6e22e">randpos&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">banner&lt;/span>[&lt;span style="color:#a6e22e">randpos&lt;/span>:]
&lt;span style="color:#a6e22e">moveCursor&lt;/span>(&lt;span style="color:#a6e22e">maxHeight&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#a6e22e">randban&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">formatLine&lt;/span>(&lt;span style="color:#a6e22e">changedBanner&lt;/span>))
&lt;span style="color:#a6e22e">banners&lt;/span>[&lt;span style="color:#a6e22e">randban&lt;/span>] = &lt;span style="color:#a6e22e">changedBanner&lt;/span>
}
&lt;span style="color:#a6e22e">noteRest&lt;/span>(&lt;span style="color:#a6e22e">rest&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, there&amp;rsquo;s the magic to the system - I&amp;rsquo;ve used the functions I&amp;rsquo;ve prepped before and created the whole display. Next, I need to calculate how fast I can randomize the lines change - basically, the code knows which lines to find and where to start the beautiful dance of destruction.&lt;/p>
&lt;p>Each time it takes only one step and then rests for 5 milliseconds. This way, I&amp;rsquo;m sure it&amp;rsquo;ll destroy a lot of stuff, but not all.&lt;/p>
&lt;p>&lt;a href="#top">Go to Top&lt;/a>&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Glad to see you here, at the end of this note!&lt;/p>
&lt;p>If I would do it again, what I would change:&lt;/p>
&lt;ul>
&lt;li>Cast-in-stone storyboard - I haven&amp;rsquo;t had that as a lot of things here was just plain experimentation&lt;/li>
&lt;li>Even more modular code - what if I want to have Star-Wars-esque solo part?&lt;/li>
&lt;li>Less noise in the code - a lot of stuff I&amp;rsquo;ve left off because I wasn&amp;rsquo;t sure if I will use them again. It&amp;rsquo;s more of a wireframe for the next videos now.&lt;/li>
&lt;/ul>
&lt;p>Thank you for reading! Give us a &lt;!-- raw HTML omitted -->like&lt;!-- raw HTML omitted --> or &lt;!-- raw HTML omitted -->subscribe&lt;!-- raw HTML omitted --> or come to &lt;!-- raw HTML omitted -->facebook&lt;!-- raw HTML omitted --> or - even better - do all of these things!&lt;/p></content></item><item><title>A Starters Guide to Go Projects</title><link>/blog/a-starters-guide-to-go-projects/</link><pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate><guid>/blog/a-starters-guide-to-go-projects/</guid><description>Thank you all for joining us in today&amp;rsquo;s meetup! If you want to refresh, you can find the slides HERE
See you again!</description><content>&lt;p>Thank you all for joining us in today&amp;rsquo;s meetup! If you want to refresh, you can find the slides &lt;a href="https://akondas.com/talks/starters-guide-go/#/">HERE&lt;/a>&lt;/p>
&lt;p>See you again!&lt;/p></content></item><item><title>Where to Go with project structure</title><link>/blog/where-to-go-with-project-structure/</link><pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate><guid>/blog/where-to-go-with-project-structure/</guid><description>Have you ever asked yourself any of the questions below:
HOW SHOULD I START MY NEW GO PROJECT? WILL THIS IMPACT MY LIFE? SHOULD I GO GET PIZZA TODAY? SHOULD I GO GET PIZZA TOMORROW? Let&amp;rsquo;s go with the answers we know first:
SHOULD I GO GET PIZZA TODAY? - Yes SHOULD I GO GET PIZZA TOMORROW? - Yes Why are you even wondering about that&amp;hellip; Pizza never wonders about you, it just wraps you in the cheesy love and (okay, I&amp;rsquo;ll stop there)</description><content>&lt;p>Have you ever asked yourself any of the questions below:&lt;/p>
&lt;h2 id="how-should-i-start-my-new-go-project-will-this-impact-my-life-should-i-go-get-pizza-today-should-i-go-get-pizza-tomorrow">HOW SHOULD I START MY NEW GO PROJECT? WILL THIS IMPACT MY LIFE? SHOULD I GO GET PIZZA TODAY? SHOULD I GO GET PIZZA TOMORROW?&lt;/h2>
&lt;p>Let&amp;rsquo;s go with the answers we know first:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SHOULD I GO GET PIZZA TODAY?&lt;/strong> - Yes&lt;/li>
&lt;li>&lt;strong>SHOULD I GO GET PIZZA TOMORROW?&lt;/strong> - Yes&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Why are you even wondering about that&amp;hellip; Pizza never wonders about you, it just wraps you in the cheesy love and (okay, I&amp;rsquo;ll stop there)&lt;/p>
&lt;/blockquote>
&lt;h2 id="how-about-that-go-project-then">How about that Go project then?&lt;/h2>
&lt;p>I will answer this question &lt;strong>THIS WEDNESDAY&lt;/strong> (which is July 29th 2020) over at &lt;strong>&lt;a href="https://www.meetup.com/Golang-London/">Golang in London&lt;/a>&lt;/strong> event! If you haven&amp;rsquo;t figured out your Wednesday yet, go &lt;a href="https://www.meetup.com/Golang-London/events/271750934/">HERE&lt;/a> and secure your spot!&lt;/p>
&lt;h2 id="will-this-impact-your-life">Will this impact Your life?&lt;/h2>
&lt;p>Well, definitely. We&amp;rsquo;ll talk about Go. We&amp;rsquo;ll talk about projects. We&amp;rsquo;ll talk about big dogs in the Go game. And, most definitely, we&amp;rsquo;ll talk about the pizza. Even about the pineapple/olives combo.&lt;/p>
&lt;p>See you then!&lt;/p></content></item><item><title>I have released an album!</title><link>/blog/i-have-released-an-album/</link><pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate><guid>/blog/i-have-released-an-album/</guid><description>Today is a very good day - after a loooo(&amp;hellip;)oong time of not releasing any new music, I&amp;rsquo;ve released an album!
10 songs, all sung in Polish, all in indie-rap genre, first one I have ever produced with my good frieds - everything from music to vocals! We have amazing guests on the album, from legends of Polish alternative to long-time rap kings; mixed by Webber (which is, by the way, one of my childhood dreams to have my music mixed by this guy) and mastered by Eprom.</description><content>&lt;p>Today is a very good day - after a loooo(&amp;hellip;)oong time of not releasing any new music, I&amp;rsquo;ve released an album!&lt;/p>
&lt;p>10 songs, all sung in Polish, all in indie-rap genre, first one I have ever produced with my good frieds - everything from music to vocals! We have amazing guests on the album, from legends of Polish alternative to long-time rap kings; mixed by Webber (which is, by the way, one of my childhood dreams to have my music mixed by this guy) and mastered by Eprom.&lt;/p>
&lt;p>Check it out on &lt;a href="https://open.spotify.com/album/6PAuKB5Xz9nocMyxvGX2YP?si=upaptw2DToC67A1X7_5f3Q">Spotify&lt;/a> or on &lt;a href="https://www.youtube.com/playlist?list=PL8vFvHFYe2w224V0lPd2QH7VKmusfa6oE">Youtube&lt;/a>. DEFINITELY let me know what you think!&lt;/p>
&lt;blockquote>
&lt;p>Hopefully this is not the only one I&amp;rsquo;ll release this year - a LOT of the things in the making!&lt;/p>
&lt;/blockquote></content></item><item><title>Tales of Devops and Go Part III</title><link>/blog/tales-of-devops-and-go-part-iii/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>/blog/tales-of-devops-and-go-part-iii/</guid><description>Previous parts:
Part I Part II As you&amp;rsquo;ve probably figured out from the title, I&amp;rsquo;ve renamed my small series Tales of Docker and Go to Tales of Devops and Go. Why is that? As I&amp;rsquo;m branching out to setting up more stuff from ground up, I think that going with more DevOps route will be better than narrowing ourselves down to Docker only.
That said, let&amp;rsquo;s go!
How to set up your Go repos with CircleCI and Sonarcloud Lately, I&amp;rsquo;ve been playing with a SonarCloud - recommended by one of my friends, the service improves your quality of code by constantly checking the bugs, code duplicates, anything you might ever oversee while coding!</description><content>&lt;p>Previous parts:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://akondas.com/blog/Tales-of-Docker-and-Go,-Part-I-Private">Part I&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://akondas.com/blog/Tales-of-Docker-and-Go-Part-II">Part II&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>As you&amp;rsquo;ve probably figured out from the title, I&amp;rsquo;ve renamed my small series &lt;code>Tales of Docker and Go&lt;/code> to &lt;code>Tales of Devops and Go&lt;/code>. Why is that? As I&amp;rsquo;m branching out to setting up more stuff from ground up, I think that going with more &lt;strong>DevOps&lt;/strong> route will be better than narrowing ourselves down to Docker only.&lt;/p>
&lt;p>That said, let&amp;rsquo;s go!&lt;/p>
&lt;h2 id="how-to-set-up-your-go-repos-with-circleci-and-sonarcloud">How to set up your Go repos with CircleCI and Sonarcloud&lt;/h2>
&lt;p>Lately, I&amp;rsquo;ve been playing with a &lt;a href="https://sonarcloud.io">SonarCloud&lt;/a> - recommended by one of my friends, the service improves your quality of code by constantly checking the bugs, code duplicates, anything you might ever oversee while coding!&lt;/p>
&lt;p>But what if your software (again) uses private Go modules? The error you&amp;rsquo;ll see more than often will be:&lt;/p>
&lt;pre>&lt;code>ERROR: Repository not found.
fatal: Could not read from remote repository.
&lt;/code>&lt;/pre>&lt;p>What to do now?&lt;/p>
&lt;h2 id="use-the-same-tactic-as-with-your-docker-images">Use the same tactic as with your docker images&lt;/h2>
&lt;p>Let&amp;rsquo;s check the yaml now:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">2.1&lt;/span>
&lt;span style="color:#f92672">orbs&lt;/span>:
&lt;span style="color:#f92672">sonarcloud&lt;/span>: &lt;span style="color:#ae81ff">sonarsource/sonarcloud@1.0.1&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">docker&lt;/span>:
- &lt;span style="color:#f92672">image&lt;/span>: &lt;span style="color:#ae81ff">circleci/golang:1.13&lt;/span>
&lt;span style="color:#f92672">working_directory&lt;/span>: &lt;span style="color:#ae81ff">/go/src/github.com/&amp;lt;ORGANISATION&amp;gt;/&amp;lt;REPO_NAME&amp;gt;&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#ae81ff">checkout&lt;/span>
&lt;span style="color:#75715e"># specify any bash command here prefixed with `run: `&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set private repo&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">go env GOPRIVATE=&amp;lt;Set the private repo&amp;gt;&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>:
&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Pass the env keys for repo setup&lt;/span>
&lt;span style="color:#f92672">command&lt;/span>: &lt;span style="color:#ae81ff">git config --global url.&amp;#34;https://${GIT_USERNAME}:${GIT_PASSWORD}@&amp;lt;repo path&amp;gt;&amp;#34;.insteadOf &amp;#34;&amp;lt;repo path&amp;gt;&amp;#34;&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">go get -v -d ./...&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">go test -v ./... -coverprofile=coverage.out&lt;/span>
- &lt;span style="color:#f92672">store_test_results&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">coverage.out&lt;/span>
- &lt;span style="color:#f92672">store_artifacts&lt;/span>:
&lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">coverage.out&lt;/span>
- &lt;span style="color:#ae81ff">sonarcloud/scan&lt;/span>
&lt;span style="color:#f92672">workflows&lt;/span>:
&lt;span style="color:#f92672">version&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">jobs&lt;/span>:
- &lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">SonarCloud&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using this &lt;code>config.yml&lt;/code> file for your &lt;code>.circleci&lt;/code> setup will do a few things:&lt;/p>
&lt;ul>
&lt;li>First, we&amp;rsquo;re pointing to &lt;code>sonarcloud&lt;/code> to finish our build with Sonarcloud in mind&lt;/li>
&lt;li>As this &lt;code>config.yml&lt;/code> gets &lt;code>circleci&lt;/code> branded docker image, we need to do some setup:
&lt;ul>
&lt;li>set up a &lt;code>GOPRIVATE&lt;/code> env variable with the private repo&lt;/li>
&lt;li>pass the &lt;code>username&lt;/code> and &lt;code>password&lt;/code> for the &lt;code>git&lt;/code> config to authenticate &lt;code>go get&lt;/code> (you can use oAuth token here!)&lt;/li>
&lt;li>run our tests and print the coverage&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>At the end, we point back to &lt;code>SonarCloud&lt;/code> to get the result to it!&lt;/li>
&lt;/ul>
&lt;p>Seems like a bit of work, but with that setup, &lt;strong>SonarCloud&lt;/strong> does a lot of work for us!&lt;/p>
&lt;p>Bear in mind - &lt;code>GIT_PASSWORD&lt;/code> and &lt;code>GIT_USERNAME&lt;/code> (or the oAuth token) has to be saved as environmental variable in CircleCI!&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>In the next part we&amp;rsquo;ll check the setup of SonarCloud to make it all work together!&lt;/p>
&lt;p>And if you want to learn why Go is useful when you&amp;rsquo;re doing DevOps, check out my blog post on &lt;a href="https://ecs.co.uk/resources/why-devops-engineers-should-know-go/">ECS website&lt;/a> - this is what we do daily. And we do it good! (Post also written by yours truly)&lt;/p></content></item><item><title>Tales of Docker and Go Part II</title><link>/blog/tales-of-docker-and-go-part-ii/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/tales-of-docker-and-go-part-ii/</guid><description>Previous parts: Part I
How to use Docker and Go Modules with private repos? Since our last talk about using private repositories with Go Modules, I&amp;rsquo;ve been playing with setting up Docker images for modules-based apps. As you might remember, I wasn&amp;rsquo;t a fan of Go Mod but that has changed slightly!
The approach below will be based on Bitbucket, but it should work out-of-the-box for any version control system.</description><content>&lt;p>Previous parts: &lt;a href="https://akondas.com/blog/Tales-of-Docker-and-Go,-Part-I-Private">Part I&lt;/a>&lt;/p>
&lt;h2 id="how-to-use-docker-and-go-modules-with-private-repos">How to use Docker and Go Modules with private repos?&lt;/h2>
&lt;p>Since our last talk about using private repositories with Go Modules, I&amp;rsquo;ve been playing with setting up Docker images for modules-based apps. As you might remember, I wasn&amp;rsquo;t a fan of Go Mod but that has changed slightly!&lt;/p>
&lt;p>The approach below will be based on Bitbucket, but it should work out-of-the-box for any version control system.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-docker" data-lang="docker">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:1.14.2-alpine AS app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>bitbucket.org&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> GO111MODULE&lt;span style="color:#f92672">=&lt;/span>on
&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_USERNAME&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_PASSWORD&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk add git&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk add openssh&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk add mercurial&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> git config --global url.&lt;span style="color:#e6db74">&amp;#34;https://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>GIT_USERNAME&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>GIT_PASSWORD&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">@bitbucket.org/&amp;#34;&lt;/span>.insteadOf &lt;span style="color:#e6db74">&amp;#34;https://bitbucket.org/&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> . .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go get -d -v&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go build -o ./myawesomeapp .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 6161&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;./myawesomeapp&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="but-what-has-changed">But, what has changed?&lt;/h3>
&lt;p>The major change is the approach to Dockerizing the application - previous one, without modules, was using multi-stage builds to fetch the initial private repos we needed. This one doesn&amp;rsquo;t have to - but if you want to be extra safe with the username and password, it&amp;rsquo;s still a very good idea to do so.&lt;/p>
&lt;p>Bear in mind, &lt;code>mercurial&lt;/code> is currently being phased out until &lt;a href="https://bitbucket.org/blog/sunsetting-mercurial-support-in-bitbucket">July 1st, 2020&lt;/a> - after that date, you can simplify that docker image.&lt;/p></content></item><item><title>Golang In London - It's Today!</title><link>/blog/golang-in-london-its-today/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/golang-in-london-its-today/</guid><description>A lot of things happening in my life now - will get you all up to speed one day! But today - if you still don&amp;rsquo;t know what are your plans for this evening - join me at Golang in London meetup and let&amp;rsquo;s write some fun code!
If you know that you won&amp;rsquo;t be able to attend, fear not! I&amp;rsquo;ve prepared the whole workshop in a form of a GitHub repo you can follow and recreate everything that we&amp;rsquo;ll code!</description><content>&lt;p>A lot of things happening in my life now - will get you all up to speed one day! But today - if you still don&amp;rsquo;t know what are your plans for this evening - join me at &lt;a href="https://www.meetup.com/Golang-London/events/271102633">Golang in London&lt;/a> meetup and let&amp;rsquo;s write some fun code!&lt;/p>
&lt;p>If you know that you won&amp;rsquo;t be able to attend, fear not! I&amp;rsquo;ve prepared the whole workshop in a form of a GitHub repo you can follow and recreate everything that we&amp;rsquo;ll code! Check it &lt;a href="https://github.com/youshy/Golang-In-London-Music-Player">here&lt;/a>!&lt;/p></content></item><item><title>Golang In London Part I - Thank You!</title><link>/blog/golang-in-london-part-i-thank-you/</link><pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/golang-in-london-part-i-thank-you/</guid><description>Thanks to all who participated in today&amp;rsquo;s afternoon with Go! Thanks to Rory for creating amazing community and running today&amp;rsquo;s event and thanks to all who asked questions and followed along!
If you need to recap what we&amp;rsquo;ve went through, go HERE
I&amp;rsquo;ve been mentioning a bit about other uses of Go in production environment, if you want to learn more then check:
How to build a Ready-To-Deploy Go CRUD API How to build the same API but with literally 1 dependency - Part I, Part II, Part III to come How to exit VIM in a really obscene way using Go How to create a Dockerimage for your Go app if you&amp;rsquo;re not using Go Modules How to write a CLI to blog automatically (I use this one daily - used this to write this post!</description><content>&lt;p>Thanks to all who participated in today&amp;rsquo;s afternoon with Go! Thanks to Rory for creating amazing community and running today&amp;rsquo;s event and thanks to all who asked questions and followed along!&lt;/p>
&lt;p>If you need to recap what we&amp;rsquo;ve went through, go &lt;a href="https://github.com/youshy/Golang-In-London-Music-Player">HERE&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;ve been mentioning a bit about other uses of Go in production environment, if you want to learn more then check:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/youshy/Hands-On-Ready-To-Deploy-Golang-CRUD-API">How to build a Ready-To-Deploy Go CRUD API&lt;/a>&lt;/li>
&lt;li>How to build the same API but with literally 1 dependency - &lt;a href="https://akondas.com/blog/Plain-Go-Crud-Api-Part-I">Part I&lt;/a>, &lt;a href="https://akondas.com/blog/Plain-Go-Crud-Api-Part-II">Part II&lt;/a>, Part III to come&lt;/li>
&lt;li>&lt;a href="https://akondas.com/blog/How-To-Exit-Vim">How to exit VIM in a really obscene way using Go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://akondas.com/blog/Tales-of-Docker-and-Go,-Part-I-Private">How to create a Dockerimage for your Go app if you&amp;rsquo;re not using Go Modules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://akondas.com/blog/Blogging-automatically">How to write a CLI to blog automatically&lt;/a> (I use this one daily - used this to write this post!)&lt;/li>
&lt;/ul>
&lt;p>There&amp;rsquo;s more from where this meetup came from, stay tuned!&lt;/p>
&lt;p>If you want to chat, grab me on Twitter (@arturkondas) or Linkedin!&lt;/p></content></item><item><title>Plain Go Crud Api Part II</title><link>/blog/plain-go-crud-api-part-ii/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/plain-go-crud-api-part-ii/</guid><description>Previous parts: Part I Devops Playground on Go: Youtube
Server Logic I won&amp;rsquo;t lie to you, the code you will see here won&amp;rsquo;t be entirely beautiful. That&amp;rsquo;s the purpose of this tutorial - our Playground has covered how to build a Production-Grade API you can easily use in your daily work; whereas this one is more of a PoC you can use to show that Go is really nice.
The code architecture will stay mostly the same.</description><content>&lt;p>Previous parts: &lt;a href="https://akondas.com/blog/Plain-Go-Crud-Api-Part-I">Part I&lt;/a>
Devops Playground on Go: &lt;a href="https://www.youtube.com/watch?v=JpznEfXcoe0">Youtube&lt;/a>&lt;/p>
&lt;h2 id="server-logic">Server Logic&lt;/h2>
&lt;p>I won&amp;rsquo;t lie to you, the code you will see here won&amp;rsquo;t be entirely beautiful. That&amp;rsquo;s the purpose of this tutorial - our &lt;a href="https://www.youtube.com/watch?v=JpznEfXcoe0">Playground&lt;/a> has covered how to build a Production-Grade API you can easily use in your daily work; whereas this one is more of a PoC you can use to show that Go is really nice.&lt;/p>
&lt;p>The code architecture will stay mostly the same.&lt;/p>
&lt;p>Let&amp;rsquo;s cut straight to the chase and set up &lt;strong>server.go&lt;/strong>:&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;database/sql&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/lib/pq&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Same as in &lt;strong>main.go&lt;/strong>, we do the initial prep and import the necessary packages. Last line is the most interesting one:&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/lib/pq&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is &lt;em>THE ONLY&lt;/em> external library we use in our code. &lt;code>pg&lt;/code> allows us to use Postgres connection and &lt;code>_&lt;/code> in front means that this is &amp;ldquo;empty import&amp;rdquo; - we need our code to understand that it&amp;rsquo;s there, not actually to use it. I know, it&amp;rsquo;s a bit odd but trust me - that&amp;rsquo;s the only odd thing here!&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;span style="color:#a6e22e">Db&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">DB&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m not a fan of using global variables in my code. That&amp;rsquo;s why I&amp;rsquo;m creating a &lt;strong>struct&lt;/strong> that will hold all the necessary variables I will use. In our case, it&amp;rsquo;s the pointer to &lt;code>DB&lt;/code> type in &lt;code>sql&lt;/code> package.&lt;/p>
&lt;p>You are more than welcome to just do a global variable here and save some words in your code.&lt;/p>
&lt;h2 id="initialize-server">Initialize server&lt;/h2>
&lt;p>Let&amp;rsquo;s set up a function to initialize our server setup:&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">App&lt;/span>) &lt;span style="color:#a6e22e">Initialize&lt;/span>() {
&lt;span style="color:#a6e22e">PgUsername&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">PgPassword&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_PASSWORD&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">PgDbName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_NAME&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">PgDbHost&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_HOST&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">connect&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;dbname=%s user=%s password=%s host=%s sslmode=disable&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">PgDbName&lt;/span>, &lt;span style="color:#a6e22e">PgUsername&lt;/span>, &lt;span style="color:#a6e22e">PgPassword&lt;/span>, &lt;span style="color:#a6e22e">PgDbHost&lt;/span>)
&lt;span style="color:#a6e22e">psqlDb&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;postgres&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">connect&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Db&lt;/span> = &lt;span style="color:#a6e22e">psqlDb&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Initialize()&lt;/code> function will set up the db connection for us and fail if the connection fails. Next bit is to actually register our handlers.&lt;/p>
&lt;p>Same as in our Playground, I&amp;rsquo;ll set up handler routes with prefixes. In &lt;code>Initialize()&lt;/code> add:&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#a6e22e">prefix&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/api&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#a6e22e">prefix&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/posts&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">GetAllPosts&lt;/span>)
&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">HandleFunc&lt;/span>(&lt;span style="color:#a6e22e">prefix&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/post&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Handler&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prepare-to-run">Prepare to run&lt;/h2>
&lt;p>There&amp;rsquo;s two more things we need to do before we&amp;rsquo;ll move to handlers - we need to set up a function for running the server and the same, nice helper function for handling JSON response as in Playground code:&lt;/p>
&lt;p>&lt;strong>server.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">App&lt;/span>) &lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Server is listening on %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ListenAndServe&lt;/span>(&lt;span style="color:#a6e22e">addr&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>))
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">JSONResponse&lt;/span>(&lt;span style="color:#a6e22e">w&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">ResponseWriter&lt;/span>, &lt;span style="color:#a6e22e">code&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">output&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{}) {
&lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">output&lt;/span>)
&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>().&lt;span style="color:#a6e22e">Set&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Content-Type&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;application/json&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">WriteHeader&lt;/span>(&lt;span style="color:#a6e22e">code&lt;/span>)
&lt;span style="color:#a6e22e">w&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The main difference here is the length of &lt;code>Run&lt;/code> function which now is rather simple and concise!&lt;/p>
&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>In the next - and last part of this tutorial series - post, we&amp;rsquo;ll build the handlers and prepare our API for liftoff! If you want to check the full code - check &lt;a href="https://github.com/youshy/plain-go-crud">the GitHub repo here&lt;/a>!&lt;/p>
&lt;p>There will be one extra post where we will compare the full blown API to this plain one, we&amp;rsquo;ll talk about downsides of our approach here and, maybe, some advantages of it!&lt;/p>
&lt;p>Also, this month we&amp;rsquo;re cooking something really special for you on Devops Playground! Stay tuned!&lt;/p></content></item><item><title>Golang in London</title><link>/blog/golang-in-london/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/golang-in-london/</guid><description>I&amp;rsquo;ve been awfully quiet this week here, for a good reason. To cut straight to the chase - join me on the next Golang in London meetup where we&amp;rsquo;ll create a small application for playing your favourite songs through terminal - entirely from scratch!
No previous Go knowledge needed, we will work it out!
Sign up here!</description><content>&lt;p>I&amp;rsquo;ve been awfully quiet this week here, for a good reason. To cut straight to the chase - join me on the next &lt;a href="https://www.meetup.com/Golang-London/">Golang in London&lt;/a> meetup where we&amp;rsquo;ll create a small application for playing your favourite songs through terminal - entirely from scratch!&lt;/p>
&lt;p>No previous Go knowledge needed, we will work it out!&lt;/p>
&lt;p>Sign up &lt;a href="https://www.meetup.com/Golang-London/events/271102633">here&lt;/a>!&lt;/p></content></item><item><title>Plain Go CRUD API Part I</title><link>/blog/plain-go-crud-api-part-i/</link><pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate><guid>/blog/plain-go-crud-api-part-i/</guid><description>First of all - thanks to all who has attended the playground! We&amp;rsquo;re trying to find a format that will benefit us all in these new times, and it makes the work 100x better knowing, that what we&amp;rsquo;ve prepared works for you! If you want to watch the playground again, check it on YouTube!
The playground assumed, more or less, that you have a full control over your development environment and you can choose with what you want to work.</description><content>&lt;p>First of all - thanks to all who has attended the playground! We&amp;rsquo;re trying to find a format that will benefit us all in these new times, and it makes the work 100x better knowing, that what we&amp;rsquo;ve prepared works for you! If you want to watch the playground again, &lt;a href="https://www.youtube.com/watch?v=JpznEfXcoe0">check it on YouTube!&lt;/a>&lt;/p>
&lt;p>The playground assumed, more or less, that you have a full control over your development environment and you can choose with what you want to work.
But what if you work in a company, that has a strict rules over which packages can be used to write your code? I have been in a situation like this a few times, but here I come to save you from this trouble!&lt;/p>
&lt;p>This article will be the first in a part of articles about how to build a Go CRUD API with Postgres integration using LITERALLY one package from outside world - and that&amp;rsquo;s way easier to pass through the management. Let&amp;rsquo;s go!&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>This article is best consumed if you attended our last &lt;a href="https://www.meetup.com/DevOpsPlayground/events/270672982/">DevOps Playground&lt;/a> about building Ready-To-Deploy Go CRUD Api. If you need a refresher, click &lt;a href="https://github.com/youshy/Hands-On-Ready-To-Deploy-Golang-CRUD-API">HERE&lt;/a> and then run both, side by side to see how the approach differs. Or wait till the last part where I&amp;rsquo;ll go almost line-by-line and compare both approaches.&lt;/p>
&lt;/blockquote>
&lt;p>TL;DR: Full code available &lt;a href="https://github.com/youshy/plain-go-crud">HERE&lt;/a> - just clone the repo if you want to follow along or fork it and use in your company/for your own fun!&lt;/p>
&lt;hr>
&lt;h2 id="initial-prep">Initial prep&lt;/h2>
&lt;p>I assume, that if you&amp;rsquo;re here, you know what Go is and you have it installed on your machine. If not, then:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Go (or known also as Golang) is a programming language created at Google by Rob Pike, Robert Griesemer and Ken Thompson. Fast, garbage collected, memory safe and super fun to use!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Get Go &lt;a href="https://golang.org">HERE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Check and learn more about Go &lt;a href="https://tour.golang.org">HERE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>This tutorial will require Postgres setup which won&amp;rsquo;t be covered until the end of the series. Please check if you have Postgres installed locally or set up an Amazon RDS (or follow along in our journey!)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Once we all got this, let&amp;rsquo;s create a folder in our work directory:&lt;/p>
&lt;pre>&lt;code>mkdir plain-go-crud &amp;amp;&amp;amp; cd plain-go-crud
&lt;/code>&lt;/pre>&lt;p>As we have Go installed, we can set up &lt;strong>Go Modules&lt;/strong> in our directory. Go Modules is the way how Go manages it&amp;rsquo;s dependencies:&lt;/p>
&lt;pre>&lt;code>go mod init plain-go-crud
&lt;/code>&lt;/pre>&lt;p>You should notice, that this has created a &lt;code>go.mod&lt;/code> file. We don&amp;rsquo;t have to worry about our dependencies anymore! Also, in our case, this will be a rather empty file&amp;hellip;&lt;/p>
&lt;p>When I was learning programming, I really didn&amp;rsquo;t like the tutorials which were jumping through the files without the initial scaffolding prior. So, we won&amp;rsquo;t do that here. Let&amp;rsquo;s create a few files:&lt;/p>
&lt;pre>&lt;code>touch main.go server.go broker.go
&lt;/code>&lt;/pre>&lt;p>&lt;code>main.go&lt;/code> will be our entry file, &lt;code>server.go&lt;/code> as the name says, will be our server logic and &lt;code>broker.go&lt;/code> will contain everything we need in order to use the database.&lt;/p>
&lt;h2 id="set-up-entry">Set Up Entry&lt;/h2>
&lt;p>Our goal is to create an API which we would be able to deploy immediately. For the Postgres connection, we will use environment keys. We need to check if the application has access to them and if they are set up in a way we need them. Let&amp;rsquo;s write some code:&lt;/p>
&lt;p>&lt;strong>main.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The beginning of our file defines the package in which we are in - if we would build a modular app, or a mesh of micro-services, we could create different packages for different parts of our application logic. In our case, that would only ramp up the complexity of the application. &lt;strong>Go&lt;/strong> compiler checks the &lt;code>package&lt;/code> name when compiling. If it&amp;rsquo;s &lt;code>main&lt;/code> it knows that it has to generate the executable we&amp;rsquo;ll be able to use.&lt;/p>
&lt;p>&lt;code>import&lt;/code> imports the packages necessary for this file to compile - in this case is the &lt;code>log&lt;/code> package which provides an easy way to log to &lt;code>stdout&lt;/code> and &lt;code>os&lt;/code> which will allow us to check environment keys.&lt;/p>
&lt;p>&lt;strong>main.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>{}
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Initialize&lt;/span>()
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:9000&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>func main()&lt;/code> is our main function in the application - when Go compiles it&amp;rsquo;s code, it looks for this function to allow the code to execute. Although we don&amp;rsquo;t have the &lt;code>App&lt;/code>, &lt;code>Initialize&lt;/code> and &lt;code>Run&lt;/code> logic yet, we can add it here. &lt;code>App&lt;/code> will create an object, that will hold all the server logic, &lt;code>Initialize&lt;/code> will set up everything we need for the app to run, and &lt;code>Run&lt;/code> - well, runs the app on the port we provide!&lt;/p>
&lt;p>&lt;strong>main.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_PASSWORD&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_PASSWORD not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_NAME&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_NAME not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_HOST&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_HOST_ not specified&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>func init()&lt;/code> runs before the whole application does - before the app starts, in this few milliseconds before the code gets to &lt;code>main()&lt;/code>, Go allows us to do things prior to that. In our case, we are checking the four keys we will need for Postgres to run in our app.&lt;/p>
&lt;p>Let&amp;rsquo;s take one bit and understand what is going on here:&lt;/p>
&lt;p>&lt;strong>main.go&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME not specified&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>if ok := &lt;/code> initialized a variable &lt;code>ok&lt;/code>; &lt;code>os.Getenv&lt;/code> is the method that checks the variable - in this case &lt;code>PG_USERNAME&lt;/code>. &lt;code>ok == &amp;quot;&amp;quot;&lt;/code> checks if the variable is empty or not; we&amp;rsquo;re doing that by comparing the &lt;code>ok&lt;/code> to an empty string. If it&amp;rsquo;s empty, we print it to the stdout and call &lt;code>os.Exit(1)&lt;/code> - all neatly hidden in &lt;code>log.Fatalln&lt;/code>.&lt;/p>
&lt;p>This will be the last time we go into this file so save it and let&amp;rsquo;s move on. You&amp;rsquo;ve just written your first Go code!&lt;/p>
&lt;h2 id="what-weve-done-so-far">What we&amp;rsquo;ve done so far?&lt;/h2>
&lt;p>Although that doesn&amp;rsquo;t seem like much, we have:&lt;/p>
&lt;ul>
&lt;li>Created a Go Module that will take care of our dependencies;&lt;/li>
&lt;li>Wrote a skeleton for our server;&lt;/li>
&lt;li>Wrote checks for env keys we&amp;rsquo;ll use to connect to the database.&lt;/li>
&lt;/ul>
&lt;p>Full &lt;strong>main.go&lt;/strong> should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span>{}
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Initialize&lt;/span>()
&lt;span style="color:#a6e22e">a&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;:9000&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_USERNAME not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_PASSWORD&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_PASSWORD not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_NAME&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_NAME not specified&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_HOST&amp;#34;&lt;/span>); &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PG_DB_HOST_ not specified&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="whats-next">What&amp;rsquo;s next?&lt;/h2>
&lt;p>In the next part we will deal with setting up the server and it&amp;rsquo;s handlers. If you have any more questions, grab me @ &lt;a href="twitter.com/arturkondas">Twitter&lt;/a> and let&amp;rsquo;s talk!&lt;/p></content></item><item><title>Why DevOps Engineers Should Know Go</title><link>/blog/why-devops-engineers-should-know-go/</link><pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate><guid>/blog/why-devops-engineers-should-know-go/</guid><description>Go came onto the tech scene by the end of 2009 and slowly established it’s position as one of the major players in the DevOps world. Today, let’s delve into why investing your time into learning Go will pay off tenfold.
Most of the DevOps tools are written in Go The very first, never released to the public, version of Docker was written in Python – but, the initial release was made using one of the initial (!</description><content>&lt;p>Go came onto the tech scene by the end of 2009 and slowly established it’s position as one of the major players in the DevOps world. Today, let’s delve into why investing your time into learning Go will pay off tenfold.&lt;/p>
&lt;h2 id="most-of-the-devops-tools-are-written-in-go">Most of the DevOps tools are written in Go&lt;/h2>
&lt;p>The very first, never released to the public, version of Docker was written in Python – but, the initial release was made using one of the initial (!) versions of Go. Kubernetes – all done in Go. Hashicorp’s Terraform and Vault – all done in Go. Prometheus, Helm, Loki, Grafana – you know it – Go!&lt;/p>
&lt;p>Go is insanely powerful and works super well on the full variety of platforms – in Docker’s case, it was Linux, with which Go binds perfectly. By default, it helps you to divide your code into small packages, that are extremely easy to re-implement into new software.&lt;/p>
&lt;p>If you don’t want to use Kubernetes or something similar to load-balance your app, you can write your own load balancer using channels and it will be stable enough to use in a production environment. The whole load balancer can be done in less than 40 lines of code, without using ANY third-party packages!&lt;/p>
&lt;p>&amp;hellip;Read more @ &lt;a href="https://ecs.co.uk/resources/why-devops-engineers-should-know-go/">ECS Digital&lt;/a>&lt;/p></content></item><item><title>Baby Steps Part II</title><link>/blog/baby-steps-part-ii/</link><pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate><guid>/blog/baby-steps-part-ii/</guid><description>Previous parts: Part I
Last time we&amp;rsquo;ve talked about how to start contributing to Open Source - and to reinforce my statement, I&amp;rsquo;ve started contributing to a relatively new library for supporting Chrome headless browser called Rod and came back to my contributions to Go-Audio.
Today we will talk about next thing we should think about in our baby steps approach:
Build Everything I will divide this post into three parts basically:</description><content>&lt;p>Previous parts: &lt;a href="https://akondas.com/blog/Baby-Steps-Part-I">Part I&lt;/a>&lt;/p>
&lt;p>Last time we&amp;rsquo;ve talked about how to start contributing to Open Source - and to reinforce my statement, I&amp;rsquo;ve started contributing to a relatively new library for supporting Chrome headless browser called &lt;a href="https://github.com/ysmood/rod">Rod&lt;/a> and came back to my contributions to &lt;a href="https://github.com/go-audio">Go-Audio&lt;/a>.&lt;/p>
&lt;p>Today we will talk about next thing we should think about in our &lt;code>baby steps&lt;/code> approach:&lt;/p>
&lt;h2 id="build-everything">Build Everything&lt;/h2>
&lt;p>I will divide this post into three parts basically:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#did">How I Did It&lt;/a>&lt;/li>
&lt;li>&lt;a href="#would">How I Would Do It Again&lt;/a>&lt;/li>
&lt;li>&lt;a href="#conclusions">Conclusions&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll tackle how I&amp;rsquo;ve learned Go using this principle, how I&amp;rsquo;d follow it learning something new and how you can use the same lessons for anything else. Let&amp;rsquo;s Go!*&lt;/p>
&lt;blockquote>
&lt;p>I definitely need to work on my Go puns&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="how-i-did-it">How I Did It&lt;/h2>
&lt;p>My story with Go, as I&amp;rsquo;ve told it &lt;a href="https://www.youtube.com/watch?v=O7tyWi24mMY">here&lt;/a> was simple - my good buddy Alex (hope you&amp;rsquo;re reading this mate!), with whom I was working in a start up in London told me:&lt;/p>
&lt;blockquote>
&lt;p>DUDE, THERE&amp;rsquo;S AN AMAZING LANGUAGE YOU NEED TO LEARN. IT&amp;rsquo;S CALLED GO AND YOU WILL LOVE IT!&lt;/p>
&lt;/blockquote>
&lt;p>Given that Alex knows his stuff EXTREMELY well, I was more than keen on jumping on this train. My approach was simple:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#research">Research&lt;/a>&lt;/li>
&lt;li>&lt;a href="#apply">Apply&lt;/a>&lt;/li>
&lt;li>&lt;a href="#improve">Improve&lt;/a>&lt;/li>
&lt;li>&lt;a href="#push">Push&lt;/a>&lt;/li>
&lt;li>&lt;a href="#repeat">Repeat&lt;/a>&lt;/li>
&lt;/ul>
&lt;!-- raw HTML omitted -->
&lt;h3 id="research">Research&lt;/h3>
&lt;p>I needed to know what Go is about. I didn&amp;rsquo;t spent much time reading about the syntax, or learning who build it and why, I just wanted to start writing in it.&lt;/p>
&lt;p>So, I&amp;rsquo;ve started like everyone with &lt;a href="https://tour.golang.org">A Tour of Go&lt;/a>. Did all the lessons, wrote down the very first syntax rules and keywords. But I needed more.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="apply">Apply&lt;/h3>
&lt;p>First thing I&amp;rsquo;ve written with Go was a simple, &lt;code>CSV&lt;/code> based &lt;a href="https://github.com/youshy/go-guitar-api">API&lt;/a> for keeping a track of my guitars.&lt;/p>
&lt;p>The code there is ugly, not well written - but it works. As a proof-of-concept, that&amp;rsquo;s good enough for me.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="improve">Improve&lt;/h3>
&lt;p>Yet after a few days, that wasn&amp;rsquo;t what I&amp;rsquo;ve wanted. Back when I&amp;rsquo;ve started working with Go, I was a Full Stack Software Engineer, working mostly with Node and Vue. You know the feeling when you kinda know how something works and you&amp;rsquo;re just anxious to work it out in the new field?&lt;/p>
&lt;p>That&amp;rsquo;s how I&amp;rsquo;ve felt! So, my next thing was more production-ready &lt;a href="https://github.com/youshy/go-json-api">API&lt;/a> that, finally, works with &lt;code>JSON&lt;/code> files. Looking at it now I don&amp;rsquo;t like a lot of stuff there: the router is not how I&amp;rsquo;d write it now, handlers are messy and it still doesn&amp;rsquo;t have any database connection ready.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="push">Push&lt;/h3>
&lt;p>Jump almost a year from this moment, I&amp;rsquo;m a full time Go developer, writing a ton of RESTful APIs and my latest approach to how I do it is &lt;a href="https://github.com/youshy/Hands-On-Ready-To-Deploy-Golang-CRUD-API">here&lt;/a> - also, if you want to follow me on that journey, join me in the next &lt;a href="https://www.meetup.com/DevOpsPlayground/events/270672982/">DevOps Playground&lt;/a> from the comfy corner of your couch!&lt;/p>
&lt;p>There&amp;rsquo;s still a lot of things missing from this tutorial about how I do stuff - which I&amp;rsquo;ll probably talk about later on.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h3 id="repeat">Repeat&lt;/h3>
&lt;p>In those four steps, I took a very beginning of my journey from almost a zero to somewhat being happy with what I write.&lt;/p>
&lt;p>But that&amp;rsquo;s just a tip of the iceberg - since I&amp;rsquo;ve started learning Go I&amp;rsquo;ve written:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/youshy/gitutil">A utility tool for switching between multiple github accounts and creating repos remotely&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/wiki">A CLI for checking Wikipedia without leaving my terminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/go-psql-triggers">A small study on using PostgreSQL triggers with Go&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/pac-go-man">A pacman in terminal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/goapify">A wrapper for python files which automatically creates an API&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/nju">A helper package for writing these posts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/youshy/bready-steady-go">A checker for my two favourite mills if they have opened their online shop&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>And many more. I&amp;rsquo;ve been playing with &lt;a href="https://github.com/youshy/biip-beep-boop">processing audio with Go&lt;/a> and &lt;a href="https://github.com/youshy/mongo-over-grpc">gRPC based APIs&lt;/a> recently - and that&amp;rsquo;s just in my free time.&lt;/p>
&lt;p>Work-wise I have another set of things I&amp;rsquo;m working on.&lt;/p>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="how-i-would-do-it-again">How I Would Do It Again&lt;/h2>
&lt;p>Following the same five steps, let&amp;rsquo;s think about how I would start learning&amp;hellip; C++. It&amp;rsquo;s been a long-time personal goal for me to be fluent in C++ but since Go has rocked my world, I haven&amp;rsquo;t had that much time to work on it.&lt;/p>
&lt;p>How I&amp;rsquo;d approach that - for the sake of this part, let&amp;rsquo;s assume I&amp;rsquo;ll write a VST (Virtual Studio Technology) plugin for recording.&lt;/p>
&lt;h3 id="research-1">Research&lt;/h3>
&lt;p>The simplest way would be to build a two-knob, very simple UI plugin with a distortion circuit - something that takes the initial signal, cranks up the gain and returns the overdriven sound. For now, I wouldn&amp;rsquo;t worry about the sound being somewhat digital (as it would be).&lt;/p>
&lt;h3 id="apply-1">Apply&lt;/h3>
&lt;p>As we know the UI is not that great, I&amp;rsquo;d probably spend some time in honing my skills in that domain. Given that I&amp;rsquo;m not the best designer ever - I can hear things well, I don&amp;rsquo;t see the design well - that would take some time.&lt;/p>
&lt;h3 id="improve-1">Improve&lt;/h3>
&lt;p>Once I&amp;rsquo;d get the UI bit a tad better, then the next logical step would be to manipulate the equalization in my new plugin. So that&amp;rsquo;d require extra step in programming this part.&lt;/p>
&lt;h3 id="push-1">Push&lt;/h3>
&lt;p>Once done, I&amp;rsquo;d move to another VST - maybe this time a tape simulator? Full blown delay circuit? Reverb? Impulse Response -based reverb?&lt;/p>
&lt;h3 id="repeat-1">Repeat&lt;/h3>
&lt;p>Of course, while doing that, I&amp;rsquo;d probably build an in-terminal Tank game or an RESTful API (as far as I know, that&amp;rsquo;s not the easiest task in C++) or literally anything else.&lt;/p>
&lt;hr>
&lt;!-- raw HTML omitted -->
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>The key to this approach is to repeat, repeat, repeat. Don&amp;rsquo;t get sad about something not working the way you want it to work and don&amp;rsquo;t overthink it. &lt;a href="https://www.youtube.com/watch?v=ZXsQAXx_ao0">Just do it!&lt;/a>&lt;/p>
&lt;p>Considering how much time has passed since I&amp;rsquo;ve written a lot of these small apps:&lt;/p>
&lt;ul>
&lt;li>Am I happy about the quality? Not that much.&lt;/li>
&lt;li>Am I proud of them? Heck yes!&lt;/li>
&lt;/ul>
&lt;p>Even if they are not the best, they show where I&amp;rsquo;ve been some time ago. These are a clear indicators of the progress I&amp;rsquo;ve made to be where I am now.
Although sometimes I end up wandering in &amp;ldquo;what-could-have-been&amp;rdquo; part of my memories, I wouldn&amp;rsquo;t change a thing I&amp;rsquo;ve did in my life - all of these things brought me here - and I&amp;rsquo;m more than happy about it!&lt;/p>
&lt;p>I&amp;rsquo;ve used the same approach in music, baking, languages - heck, even in circuits building. It applies to anything new you want to learn - and it works.&lt;/p>
&lt;p>Give it a try and then @ me on &lt;a href="https://twitter.com/arturkondas">Twitter&lt;/a> and let&amp;rsquo;s chat!&lt;/p></content></item><item><title>How To Exit Vim</title><link>/blog/how-to-exit-vim/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>/blog/how-to-exit-vim/</guid><description>How to exit Vim in three simple steps.
Using Go, of course.
Make sure you have Go installed. Write a whole application to find and kill vim: package main import ( &amp;#34;bytes&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;path/filepath&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;strings&amp;#34; ) func TerminateVim(path string, info os.FileInfo, err error) error { var proc []int if strings.Count(path, &amp;#34;/&amp;#34;) == 3 { if strings.Contains(path, &amp;#34;/status&amp;#34;) { pid, err := strconv.Atoi(path[6:strings.LastIndex(path, &amp;#34;/&amp;#34;)]) if err !</description><content>&lt;p>How to exit Vim in three simple steps.&lt;/p>
&lt;p>Using Go, of course.&lt;/p>
&lt;ul>
&lt;li>Make sure you have Go installed.&lt;/li>
&lt;li>Write a whole application to find and kill vim:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> (
&lt;span style="color:#e6db74">&amp;#34;bytes&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;io/ioutil&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;log&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;path/filepath&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;strconv&amp;#34;&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;strings&amp;#34;&lt;/span>
)
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">TerminateVim&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">info&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">FileInfo&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">proc&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Count&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/status&amp;#34;&lt;/span>) {
&lt;span style="color:#a6e22e">pid&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Atoi&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>[&lt;span style="color:#ae81ff">6&lt;/span>:&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">LastIndex&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span>)])
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> string(&lt;span style="color:#a6e22e">f&lt;/span>[&lt;span style="color:#ae81ff">6&lt;/span>:&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">IndexByte&lt;/span>(&lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;\n&amp;#39;&lt;/span>)])
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;vim&amp;#34;&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;pid %v name %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>)
&lt;span style="color:#a6e22e">proc&lt;/span> = append(&lt;span style="color:#a6e22e">proc&lt;/span>, &lt;span style="color:#a6e22e">pid&lt;/span>)
}
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">proc&lt;/span> {
&lt;span style="color:#a6e22e">proc&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">FindProcess&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
}
&lt;span style="color:#a6e22e">proc&lt;/span>.&lt;span style="color:#a6e22e">Kill&lt;/span>()
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
}
&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Walk&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/proc&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">TerminateVim&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalln&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Killed vim\n&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Run with &lt;code>go run .&lt;/code> or make executable using &lt;code>go build -o VimKill&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Written by yours truly. Find more ways &lt;a href="https://github.com/hakluke/how-to-exit-vim">here&lt;/a>&lt;/p></content></item><item><title>Pandemic Or Not, You Should Learn A Lot</title><link>/blog/pandemic-or-not-you-should-learn-a-lot/</link><pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate><guid>/blog/pandemic-or-not-you-should-learn-a-lot/</guid><description>We have found ourselves in a completely new arena with a new set of rules. I really don’t want to talk here about the questionable consumption of bleach advice from a particular president in the United States, as this is way beyond my expertise, but let’s talk about something I do know – how to learn.
I used to teach a lot a few years ago, before I took a very deep dive into the tech world.</description><content>&lt;p>We have found ourselves in a completely new arena with a new set of rules. I really don’t want to talk here about the questionable consumption of bleach advice from a particular president in the United States, as this is way beyond my expertise, but let’s talk about something I do know – how to learn.&lt;/p>
&lt;p>I used to teach a lot a few years ago, before I took a very deep dive into the tech world. I was teaching guitar and music theory for almost six years and the problem I had a lot with my students was them asking “But why? Why would I need &amp;lt;insert_your_skill_name&amp;gt; in the future?”.&lt;/p>
&lt;p>Let me tell why.&lt;/p>
&lt;p>&lt;a href="https://ecs.co.uk/resources/pandemic-or-not-you-should-learn-a-lot/">&amp;hellip;Read more @ ECS Digital&lt;/a>&lt;/p></content></item><item><title>Learn something about Go - DevOps Playground</title><link>/blog/learn-something-about-go-devops-playground/</link><pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate><guid>/blog/learn-something-about-go-devops-playground/</guid><description>Today&amp;rsquo;s a quick one - my amazing company ECS Digital has a small subset of people who runs DevOps Playground and this post is a small shootout to them (because they&amp;rsquo;re doing AMAZING job!)
What&amp;rsquo;s DevOps Playground? It&amp;rsquo;s a meetup for devops-oriented techies who wants to learn something new about their profession. This time, I&amp;rsquo;m more than proud to run the next one on May 28th and teach you all something about writing full CRUD (Create-Read-Upload-Delete) RESTful API in Go!</description><content>&lt;p>Today&amp;rsquo;s a quick one - my amazing company &lt;a href="https://ecs.co.uk/digital-engineering/">ECS Digital&lt;/a> has a small subset of people who runs &lt;a href="https://www.meetup.com/DevOpsPlayground/">DevOps Playground&lt;/a> and this post is a small shootout to them (because they&amp;rsquo;re doing AMAZING job!)&lt;/p>
&lt;p>What&amp;rsquo;s DevOps Playground? It&amp;rsquo;s a meetup for devops-oriented techies who wants to learn something new about their profession. This time, I&amp;rsquo;m more than proud to run the next one on May 28th and teach you all something about writing full CRUD (Create-Read-Upload-Delete) RESTful API in Go!&lt;/p>
&lt;p>I&amp;rsquo;ll walk you through all the techniques I use to create APIs and we&amp;rsquo;ll make everything nice and deployable!&lt;/p>
&lt;p>Hope to see you all there - &lt;a href="https://www.meetup.com/DevOpsPlayground/events/270672982/">sign up HERE&lt;/a>&lt;/p>
&lt;p>Also, check all &lt;a href="https://github.com/DevOpsPlayground/">previous playgrounds&lt;/a>&lt;/p></content></item><item><title>Blogging automatically</title><link>/blog/blogging-automatically/</link><pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate><guid>/blog/blogging-automatically/</guid><description>As you probably can see, I&amp;rsquo;m trying to take this blog seriously, adding the long-awaited (by me) dark theme, adding the media tab, where you can find all non-coding stuff I&amp;rsquo;ve done recently and aiming to write more posts in general. But how do I write them in the first place?
Enter NJU Nju is a CLI I wrote almost 8 months ago, when I&amp;rsquo;ve started this blog, to help me with automatic the very tedious process of creating new posts.</description><content>&lt;p>As you probably can see, I&amp;rsquo;m trying to take this blog seriously, adding the long-awaited (by me) dark theme, adding the &lt;a href="https://akondas.com/media">media&lt;/a> tab, where you can find all non-coding stuff I&amp;rsquo;ve done recently and aiming to write more posts in general. But how do I write them in the first place?&lt;/p>
&lt;h2 id="enter-nju">Enter NJU&lt;/h2>
&lt;p>&lt;a href="https://github.com/youshy/nju">Nju&lt;/a> is a CLI I wrote almost 8 months ago, when I&amp;rsquo;ve started this blog, to help me with automatic the &lt;em>very tedious&lt;/em> process of creating new posts.&lt;/p>
&lt;p>This page is based on &lt;a href="https://jekyllrb.com/">Jekyll&lt;/a>, which is a very nice - and GitHub powered - engine to host your own simple blogs. Written in Ruby, it allows to write blogs using your Markdown.md files and Git. There are a few things to keep in mind though:&lt;/p>
&lt;ul>
&lt;li>Posts must follow &lt;code>year-month-day-title.md&lt;/code> format&lt;/li>
&lt;li>Posts must have &lt;a href="https://jekyllrb.com/docs/front-matter/">Front Matter&lt;/a> block as the first thing in the file&lt;/li>
&lt;li>Well, you have to manually create, write and commit your files&lt;/li>
&lt;/ul>
&lt;p>I can see more than one way to make my life simpler&amp;hellip; Let&amp;rsquo;s go!&lt;/p>
&lt;h2 id="why-cli">Why CLI?&lt;/h2>
&lt;p>Because command-line interfaces makes your life easier. And if you&amp;rsquo;re nerd like me, and don&amp;rsquo;t like leaving your cozy terminal, that&amp;rsquo;s even better. I won&amp;rsquo;t go over the whole package here, I&amp;rsquo;ll just do the small highlights and general overview.&lt;/p>
&lt;h2 id="following-format">Following format&lt;/h2>
&lt;p>First thing we need to do, is to get the correct file name for our blog to run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">t&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Now&lt;/span>()
&lt;span style="color:#a6e22e">year&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Year&lt;/span>())
&lt;span style="color:#a6e22e">monthInt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> int(&lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Month&lt;/span>())
&lt;span style="color:#a6e22e">dayInt&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">t&lt;/span>.&lt;span style="color:#a6e22e">Day&lt;/span>()
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">month&lt;/span>, &lt;span style="color:#a6e22e">day&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">monthInt&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">10&lt;/span> {
&lt;span style="color:#a6e22e">month&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">monthInt&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">month&lt;/span> = &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">monthInt&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dayInt&lt;/span> &amp;lt; &lt;span style="color:#ae81ff">10&lt;/span> {
&lt;span style="color:#a6e22e">day&lt;/span> = &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">dayInt&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">day&lt;/span> = &lt;span style="color:#a6e22e">strconv&lt;/span>.&lt;span style="color:#a6e22e">Itoa&lt;/span>(&lt;span style="color:#a6e22e">dayInt&lt;/span>)
}
&lt;span style="color:#a6e22e">fileNameString&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">ReplaceAll&lt;/span>(&lt;span style="color:#a6e22e">title&lt;/span>, &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;.md&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">fileName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">year&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">month&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">day&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">fileNameString&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, we&amp;rsquo;re getting the current time, extracting &lt;strong>year&lt;/strong>, &lt;strong>month&lt;/strong> and &lt;strong>day&lt;/strong> and concatenating them with the post title we&amp;rsquo;ll pass later in the CLI.&lt;/p>
&lt;h2 id="adding-the-block">Adding the block&lt;/h2>
&lt;p>That&amp;rsquo;s even easier:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">header&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;---\nlayout: post\ntitle: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n---\n\n&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But, this is where the real fun begins.&lt;/p>
&lt;h2 id="wrap-it-all-together">Wrap it all together!&lt;/h2>
&lt;p>(Tried to record my screen here and export it to GIF, might write a Go package to do that for me&amp;hellip;)&lt;/p>
&lt;p>My workflow is really easy: I type &lt;code>nju post &amp;quot;&amp;lt;name&amp;gt;&amp;quot;&lt;/code> from whenever I am - I don&amp;rsquo;t have to change any directory whatsoever, Nju works from EEEEVVEEERYYYYWWWHEEEEREEEE, then type what I want, save it and press &lt;code>y&lt;/code> to upload it to my blog! Easy?&lt;/p>
&lt;p>Not so much. Bear in mind, I&amp;rsquo;m an avid fan of Vim, so I tend to do almost everything in Vim. Therefore, when I type &lt;code>nju post &amp;quot;&amp;lt;name&amp;gt;&amp;quot;&lt;/code>, this commands opens up Vim with pre-set header and ready for me to type. That happens because of these lines:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">cmd&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;vim&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">blogDir&lt;/span>, &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Base&lt;/span>(&lt;span style="color:#a6e22e">fileName&lt;/span>)))
&lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Stdin&lt;/span> = &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdin&lt;/span>
&lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span> = &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Stdout&lt;/span>
&lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I&amp;rsquo;m routing my &lt;strong>Stdin&lt;/strong> and &lt;strong>Stdout&lt;/strong> streams to Vim, that&amp;rsquo;s why the header is already set!&lt;/p>
&lt;p>Then, when I save and exit Vim, my terminal asks me &lt;code>Is that post finished? Do you want to commit? (y/n)&lt;/code>. This very simple check lets me write posts throughout a few days or, if it&amp;rsquo;s ready, to commit it automatically:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Let&amp;#39;s go with this post then!\n&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">add&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;git&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;add&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fileName&lt;/span>)
&lt;span style="color:#a6e22e">add&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span> = &lt;span style="color:#a6e22e">blogDir&lt;/span>
&lt;span style="color:#a6e22e">add&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;span style="color:#a6e22e">commitName&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;New Post: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>
&lt;span style="color:#a6e22e">commit&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;git&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;commit&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-m&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">commitName&lt;/span>)
&lt;span style="color:#a6e22e">commit&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span> = &lt;span style="color:#a6e22e">blogDir&lt;/span>
&lt;span style="color:#a6e22e">commit&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;span style="color:#a6e22e">push&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">exec&lt;/span>.&lt;span style="color:#a6e22e">Command&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;git&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;push&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Dir&lt;/span> = &lt;span style="color:#a6e22e">blogDir&lt;/span>
&lt;span style="color:#a6e22e">push&lt;/span>.&lt;span style="color:#a6e22e">Run&lt;/span>()
&lt;/code>&lt;/pre>&lt;/div>&lt;p>What this is - &lt;code>git add &amp;lt;filename&amp;gt;&lt;/code>, &lt;code>git commit -m &amp;quot;New Post: &amp;lt;title&amp;gt;&amp;quot;&lt;/code> and &lt;code>git push&lt;/code> - but done with Go!&lt;/p>
&lt;p>Probably this could be done nicer and cleaner but bear in mind, I haven&amp;rsquo;t played with this app in a while now - it works perfectly for my needs!&lt;/p>
&lt;h2 id="licence-to-cli">Licence to CLI&lt;/h2>
&lt;p>I&amp;rsquo;ve added my binary as an alias in my &lt;code>.zshrc&lt;/code> config, so then I can use this app from whenever I am - I can quicly switch context when working if I want to write something without overthinking it:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">f&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Create&lt;/span>(&lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">blogDir&lt;/span>, &lt;span style="color:#a6e22e">filepath&lt;/span>.&lt;span style="color:#a6e22e">Base&lt;/span>(&lt;span style="color:#a6e22e">fileName&lt;/span>)))
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This line makes sure that my streams are in the right place. &lt;code>blogDir&lt;/code> is a path to my blog repo on my Mac.&lt;/p>
&lt;h2 id="wrapping-up">Wrapping up&lt;/h2>
&lt;p>Literally every single post I&amp;rsquo;ve written here has been done using this CLI. Even the Hello World was my testing ground for this package. What I would (and probably will) change in the next few months:&lt;/p>
&lt;ul>
&lt;li>Show unfinished posts&lt;/li>
&lt;li>Small notes/gists&lt;/li>
&lt;li>Automatically update date with posts that are written over a few days&lt;/li>
&lt;li>Automatically post a link on Twitter and LinkedIn that I&amp;rsquo;ve posted a new thing&lt;/li>
&lt;/ul>
&lt;p>All in all, I&amp;rsquo;m more than happy with this package. You might think that I&amp;rsquo;m overthinking it and should just navigate to the directory and create everything as anyone else would but that&amp;rsquo;s my game. I like doing 150% work once and then benefit from that over time. Not saying it&amp;rsquo;s perfect, but it works for me! Maybe it&amp;rsquo;d work for you as well?&lt;/p>
&lt;hr>
&lt;p>As you&amp;rsquo;ve probably noticed, I&amp;rsquo;ve finally bought a domain, so from now on you can find this blog by typing &lt;code>akondas.com&lt;/code> into your browser (SUPER STOKED ABOUT THIS :D). Also I&amp;rsquo;ve added a &lt;a href="https://akondas.com/media/">media&lt;/a> tab as I&amp;rsquo;ve mentioned in the beginning!&lt;/p>
&lt;p>More good things to come here! Will definitely start writing more about the packages I&amp;rsquo;ve written and, most probably, write more packages. There&amp;rsquo;s so much to automate&amp;hellip;&lt;/p></content></item><item><title>Baby Steps Part I</title><link>/blog/baby-steps-part-i/</link><pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate><guid>/blog/baby-steps-part-i/</guid><description>This will be a small series about doing baby steps and playing the long game.
How To Start Contributing To Open-Source I had a countless conversations in the last 3 years about &amp;ldquo;How to start? How can I write software?&amp;rdquo;. Although, I don&amp;rsquo;t think I&amp;rsquo;m any authority in this topic, I&amp;rsquo;ve helped a few people land their first software development jobs. Today we&amp;rsquo;ll talk about the thing, that recruiters seems to rave about and most of us are even scared to think about - how to contribute to OSS for the first time?</description><content>&lt;p>This will be a small series about doing baby steps and playing the long game.&lt;/p>
&lt;h2 id="how-to-start-contributing-to-open-source">How To Start Contributing To Open-Source&lt;/h2>
&lt;p>I had a countless conversations in the last 3 years about &amp;ldquo;How to start? How can I write software?&amp;rdquo;. Although, I don&amp;rsquo;t think I&amp;rsquo;m any authority in this topic, I&amp;rsquo;ve helped a few people land their first software development jobs. Today we&amp;rsquo;ll talk about the thing, that recruiters seems to rave about and most of us are even scared to think about - &lt;strong>how to contribute to OSS for the first time?&lt;/strong>&lt;/p>
&lt;h2 id="translate-it">Translate it!&lt;/h2>
&lt;p>Easiest way is to literally take a piece of software and translate it to your native language. I can hear you - &amp;ldquo;WHAT IF I SPEAK ONLY ENGLISH?!&amp;rdquo; - then help any non-native speakers improve their English translations. For you it&amp;rsquo;ll be ultra easy; for them it&amp;rsquo;ll help their grammar, vocabulary and ways of thinking in English.&lt;/p>
&lt;p>For the last two years, I have contributed to a VS Code translation from English to Polish (how to do that in a sec), contributed a bit to &lt;a href="https://github.com/go-gitea/gitea">Gitea&lt;/a> translation (Gitea is amazing btw!) and translated two small libs on GitHub - &lt;a href="https://github.com/aahung/Unshaky">Unshaky&lt;/a> which tackles very annoying problems with &amp;gt;2016 MacBooks Pro keyboards and &lt;a href="https://github.com/rxhanson/Rectangle">Rectangle&lt;/a> which adds Windows 10 functionality to your MacOS and allows you to divide the screen into multiple chunks!&lt;/p>
&lt;p>About VS Code (and probably Gitea) translation - both of these use 3rd party software/pages to contribute with translations - makes the work painless and easy!&lt;/p>
&lt;h2 id="tackle-the-giants">Tackle the giants&lt;/h2>
&lt;p>I&amp;rsquo;ve been raving about my &lt;a href="https://github.com/grafana/grafana">Grafana&lt;/a> contribution for a while now - apart from working on small libs here and there, this was my first &lt;strong>big&lt;/strong> contribution to OSS. Sounds big, but it was as easy as going through the &lt;strong>Issues&lt;/strong> tab, finding the one I could tackle and just working on it! My first PR was a mess tho, but nobody has to know, shh&amp;hellip;&lt;/p>
&lt;h2 id="but-how-can-i-find-it">But how can I find it?&lt;/h2>
&lt;p>Chances are, that if you&amp;rsquo;re using some custom software, doesn&amp;rsquo;t matter if it&amp;rsquo;s a Video player or your favourite iOS/Android app, it will have some translation to do. If the code is on GitHub, you can check if they&amp;rsquo;re allowing contributors to translate their app.&lt;/p>
&lt;p>Second way (that&amp;rsquo;s the one I&amp;rsquo;ve used to find Unshaky and Rectangle) is reading &lt;a href="https://news.ycombinator.com/">HackerNews&lt;/a>. Apart from it being one of the best ways to learn about great new tech and getting a different view on various topics, once in a while there will be &lt;strong>Show HN&lt;/strong> topic, where someone shows (sic!) their software. 99% they will need help with something - just do it!&lt;/p>
&lt;h2 id="but-what-if-ill-fail">But what if I&amp;rsquo;ll fail?&lt;/h2>
&lt;p>We all do. That&amp;rsquo;s the part of the process. Instead of being afraid of it - embrace it.&lt;/p>
&lt;p>That&amp;rsquo;s the way to grow. You don&amp;rsquo;t have to do a sequel to VS Code immediately. Baby Steps. &lt;strong>BABY STEPS&lt;/strong>.&lt;/p>
&lt;hr>
&lt;p>So the aspiration from this post is to write at least one blog post weekly; hopefully I&amp;rsquo;ll be able to work it out! If you have anything you&amp;rsquo;d like to read about, ping me on LinkedIn, &lt;em>@arturkondas&lt;/em> on Twitter or Instagram&amp;hellip; Just reach out!&lt;/p>
&lt;p>Also, as you (hopefully!) can see, we&amp;rsquo;re in dark mode now! Finally!&lt;/p></content></item><item><title>Infinity War</title><link>/blog/infinity-war/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><guid>/blog/infinity-war/</guid><description>I bet, that you have thought that this post will be about Avengers or anything Marvel related. The truth is, that our current world is our Infinity War - we&amp;rsquo;re not in the Endgame yet and (hopefully) we won&amp;rsquo;t have just 1 option out of over 14 million that will be the correct one.
The world has changed a lot in 2020 - but we all know that. The reason why I&amp;rsquo;m writing this post, is that a lot of my friends are struggling in el nuevo mundo del cuarentena, whereas I seem to thrive and make the best of it.</description><content>&lt;p>I bet, that you have thought that this post will be about Avengers or anything Marvel related. The truth is, that our current world is our Infinity War - we&amp;rsquo;re not in the Endgame yet and (hopefully) we won&amp;rsquo;t have just 1 option out of over 14 million that will be the correct one.&lt;/p>
&lt;p>The world has changed a lot in 2020 - but we all know that. The reason why I&amp;rsquo;m writing this post, is that a lot of my friends are struggling in el nuevo mundo del cuarentena, whereas I seem to thrive and make the best of it. Let me take you on a small trip into how the world has changed to me.&lt;/p>
&lt;h2 id="food-oh-my-god-foooooood">Food&amp;hellip; Oh my god, foooooood!&lt;/h2>
&lt;p>I cook twice per day, every day, for the last 3 months (apart from literally one meal when I&amp;rsquo;ve ordered Pizza Hut due to migraine I had); I send all the pics to my friends (YKWYA!), to my parents; I tweak, test new things and write small CLIs to help me with cooking. If you don&amp;rsquo;t know what I&amp;rsquo;m talking about, check &lt;a href="https://youshy.github.io/To-Bake-Or-Not-To-Bake/">this&lt;/a> post from almost a month ago - since then, my small flour supply grew from 3kgs to astonishing 40kgs!&lt;/p>
&lt;p>And yes, I make bread every other day; I bake small buns, I test recipes and learn something new every day. Also, I can&amp;rsquo;t see myself eating refried food from a box in the nearest future - honestly, I feel like I&amp;rsquo;m 12 again and eating breakfast before school, it&amp;rsquo;s a marvellous feeling!&lt;/p>
&lt;p>&lt;code>For the ones who are extra interested - I ate only around 10 homemade pizzas since the lockdown, but lost some weight! Magic?&lt;/code>&lt;/p>
&lt;h2 id="code-knowledge-bugs">Code, knowledge, bugs&lt;/h2>
&lt;p>My biggest fear in the lockdown was that I will end up in the same place I&amp;rsquo;ve been a few years ago - working 10hrs+ every day, starring into the void of my terminal and end up like Neo following the white rabbit. I&amp;rsquo;ve made a pact with myself, that Sundays are the sacred days - no code, no new stull, just ye olde Netflix, Food, Guitar &amp;amp; Chill.
And every other day, I try to spend around an hour learning something new - this way, I&amp;rsquo;ve ended up improving Grafana a bit in the newest, &lt;a href="https://github.com/grafana/grafana/releases/tag/v7.0.0-beta1">7.0.0 release&lt;/a> - look for #22898 (nothing big, but I&amp;rsquo;m proud as heck); learned a lot about &lt;a href="https://github.com/youshy/gRPC-API">gRPC&lt;/a>; installed Ubuntu on my PC to play around (and so far I really really like it!), started going through Black Hat Go and, the biggest thing, started working on some audio manipulation in Go (hope to do it even more!). And that&amp;rsquo;s not all!&lt;/p>
&lt;h2 id="not-code">Not Code&lt;/h2>
&lt;p>Started working on some fun guitar stuff, ended up producing my friend&amp;rsquo;s small acoustic EP. I have recorded some really REALLY good tracks and worked with some incredibly amazing and smart people. Started learning Spanish again (third time&amp;rsquo;s the charm!), started building guitar pedals (so far built 4!), taught my fiance some Frontend tricks and rebuilt my whole studio (cables, outboard gear, patches, etc).&lt;/p>
&lt;p>If it sounds like bragging to you, I&amp;rsquo;m not surprised. But that&amp;rsquo;s not the point here.&lt;/p>
&lt;h2 id="mental-health">Mental Health&lt;/h2>
&lt;p>Not having to use the tube every day, not spending 2hrs+ on commute every day, not eating reheated food every day changes everything.&lt;/p>
&lt;p>I&amp;rsquo;m getting a lot of sun every day (by sitting at the rooftop!), I&amp;rsquo;m eating fresh food every day, I&amp;rsquo;m spending a lot of time with my loved ones (either calling or just chatting with), I&amp;rsquo;m waking up without an alarm clock every day and going to sleep without prepping my backpack to go the next day, I&amp;rsquo;m getting some workouts done if I feel like it.&lt;/p>
&lt;p>I&amp;rsquo;m working in my pyjamas, in my sweatpants - heck, in my bathrobe sometimes!&lt;/p>
&lt;p>The thing that I feel people don&amp;rsquo;t see is that this is, sadly, the only time in our lifetimes when we are be able to take care of ourselves to such extend, literally being able to live every minute of our days the way we want. I know, that you&amp;rsquo;re scared of the C word - as am I. What I&amp;rsquo;ve done to not to feel so down - I don&amp;rsquo;t read the news more than once a week; I get my news from my trusted friends (again, YKWYA!) and I read a lot of memes. That helps a lot, really.&lt;/p>
&lt;h2 id="endgame">Endgame?&lt;/h2>
&lt;p>My endgame is rather simple - I would love to make the post-quarantine life a new chapter in my career and in my life. In the ideal world, I wouldn&amp;rsquo;t change anything, really. I love the asynchronicity of the communication, I love that we can work independently (for example, my band&amp;rsquo;s (SHHH!) new EP is being recorded entirely remotely, with each member getting their work done from their homes all over Europe (really)) and be better at it every day.
And I love bread, pizzas and fresh food every single day!&lt;/p>
&lt;p>I know, that a lot of people don&amp;rsquo;t feel the same way as I do - they miss their friends, the office, the commute, everything from &amp;ldquo;the old world&amp;rdquo;. Trust me, I do miss quite a few things from the old world too. But, I hope, that the new world will be way more compassionate, way more caring and way more rewarding in our day-to-day lives. I hope that the new world will make us happier that we&amp;rsquo;ve been. Because this is what matters at the end. Being happy.&lt;/p>
&lt;hr>
&lt;p>This post is very personal, as it gives you a lot of insights into my daily life and how I cope with the current situation. If you don&amp;rsquo;t feel like getting a hang of it all and having a rather tough time getting through - hit me up, I will be always happy to hear you out! As one of the movies of my adolescence sang: &amp;ldquo;We&amp;rsquo;re all in this together; once we know, that we are, we&amp;rsquo;re all stars and we see that!&amp;rdquo;&lt;/p>
&lt;p>I didn&amp;rsquo;t said it was a good movie. But, at least the song was catchy!&lt;/p></content></item><item><title>Grafana nanana</title><link>/blog/grafana-nanana/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/grafana-nanana/</guid><description>So this is not really a post or something, it&amp;rsquo;s more of a public service announcement - if you&amp;rsquo;re using Grafana, I might have messed up (or fixed?) your Provisioning game - check this which is my first (and definitely not last!) contribution to Grafana source code.
Yes, I wanted to brag a little bit.</description><content>&lt;p>So this is not really a post or something, it&amp;rsquo;s more of a public service announcement - if you&amp;rsquo;re using Grafana, I might have messed up (or fixed?) your Provisioning game - check &lt;a href="https://github.com/grafana/grafana/pull/22898">this&lt;/a> which is my first (and definitely not last!) contribution to Grafana source code.&lt;/p>
&lt;p>Yes, I wanted to brag a little bit.&lt;/p></content></item><item><title>To Bake Or Not To Bake</title><link>/blog/to-bake-or-not-to-bake/</link><pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate><guid>/blog/to-bake-or-not-to-bake/</guid><description>Weird times, huh? I bet you had your fair share of posts about the COVID-19 already, so let me shine some light on you with some old-school nerd approach to solving problems you should never have in real life!
So I&amp;rsquo;ve started baking bread Actually, it started with pizza - most of the folks at my job already knows about my obsession about a proper slice, but my second, yeast-and-flour-infused love is bread - which is not really surprising, as I&amp;rsquo;m Polish.</description><content>&lt;p>Weird times, huh? I bet you had your fair share of posts about the COVID-19 already, so let me shine some light on you with some old-school nerd approach to solving problems you should never have in real life!&lt;/p>
&lt;h2 id="so-ive-started-baking-bread">So I&amp;rsquo;ve started baking bread&lt;/h2>
&lt;p>Actually, it started with pizza - most of the folks at my job already knows about my obsession about a proper slice, but my second, yeast-and-flour-infused love is bread - which is not really surprising, as I&amp;rsquo;m Polish. The biggest issue I had in UK is finding the proper loaf - the one which has the best crust-to-density ratio and dries out within a day or two and doesn&amp;rsquo;t transform into a sponge and stays alive for years.&lt;/p>
&lt;h2 id="but-you-need-flour">But, you need flour&lt;/h2>
&lt;p>To bake bread. Nowadays, it&amp;rsquo;s not that easy to get your hands on a proper flour, but I was lucky enough to see the black clouds coming, so I&amp;rsquo;ve stacked up a few kgs of the good, white stuff. But I&amp;rsquo;ve used most of it, so I wanted to order some online. I&amp;rsquo;ve narrowed down the game to two main mills - &lt;a href="https://www.shipton-mill.com">Shipton&lt;/a> and &lt;a href="https://fwpmatthews.co.uk">Matthews&lt;/a>.
Both have introduced limitations to opening hours and how many orders they&amp;rsquo;re picking up - and being the nerd I&amp;rsquo;m, I don&amp;rsquo;t want to manually check the pages. So what can we do?&lt;/p>
&lt;h1 id="lets-automate-it">LET&amp;rsquo;S AUTOMATE IT&lt;/h1>
&lt;p>What we need to do?&lt;/p>
&lt;ul>
&lt;li>Check the page for the stuff I need&lt;/li>
&lt;li>Save the page state&lt;/li>
&lt;li>Check if it has changed&lt;/li>
&lt;li>Notify me if it&amp;rsquo;s changed&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s dive down.&lt;/p>
&lt;h3 id="1-check-the-page">1. Check the page&lt;/h3>
&lt;p>That&amp;rsquo;s easy - a simple &lt;code>GET&lt;/code> and check the body. I&amp;rsquo;ve used a really, really nice lib called &lt;code>goquery&lt;/code> here, which allows me to check the body according to the class/id which, I presume, has the info I need:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go"> &lt;span style="color:#a6e22e">doc&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">goquery&lt;/span>.&lt;span style="color:#a6e22e">NewDocumentFromReader&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">SHIPTON&lt;/span> {
&lt;span style="color:#a6e22e">doc&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.well&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Each&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">goquery&lt;/span>.&lt;span style="color:#a6e22e">Selection&lt;/span>) {
&lt;span style="color:#a6e22e">result&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;p&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Text&lt;/span>()
})
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">MATTHEWS&lt;/span> {
&lt;span style="color:#a6e22e">doc&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.storeclosing_popup&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Each&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">goquery&lt;/span>.&lt;span style="color:#a6e22e">Selection&lt;/span>) {
&lt;span style="color:#a6e22e">result&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Find&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;div&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">Text&lt;/span>()
})
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you check the code, I can do a lot more with my selectors, but for now, I&amp;rsquo;ve identified what I need, and just rolled with it. The trick here was to check what it being changed on the page and what indicates if the shop&amp;rsquo;s open.&lt;/p>
&lt;h3 id="2-save-the-page-state">2. Save the page state&lt;/h3>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">updateMill&lt;/span>(&lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">sel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getMill&lt;/span>(&lt;span style="color:#a6e22e">mill&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">SHIPTON&lt;/span> {
&lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">WriteFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;shiptonmill.txt&amp;#34;&lt;/span>, []byte(&lt;span style="color:#a6e22e">sel&lt;/span>), &lt;span style="color:#ae81ff">0644&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;updated shipton mill file\n&amp;#34;&lt;/span>)
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">MATTHEWS&lt;/span> {
&lt;span style="color:#a6e22e">_&lt;/span> = &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">WriteFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;matthewsmill.txt&amp;#34;&lt;/span>, []byte(&lt;span style="color:#a6e22e">sel&lt;/span>), &lt;span style="color:#ae81ff">0644&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;updated matthews mill file\n&amp;#34;&lt;/span>)
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Quick and dirty. All that I need in these days!&lt;/p>
&lt;h3 id="3-check-if-it-has-changed">3. Check if it has changed&lt;/h3>
&lt;p>Again, nothing spectacular:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">checkMill&lt;/span>(&lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#a6e22e">sel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getMill&lt;/span>(&lt;span style="color:#a6e22e">mill&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">SHIPTON&lt;/span> {
&lt;span style="color:#a6e22e">b&lt;/span>, &lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ioutil&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;shiptonmill.txt&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> string(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SHIPTON MILL\n&amp;#34;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sel&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;The page has changed!\n&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">notify&lt;/span>(&lt;span style="color:#a6e22e">SHIPTON&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
}
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;This is a hard exit to not overflood me with notifications\n&amp;#34;&lt;/span>)
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Still the same\n&amp;#34;&lt;/span>)
}
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Just getting the page, checking my reference file and notifying me if something changed.&lt;/p>
&lt;h3 id="4-notify-if-changed">4. Notify if changed&lt;/h3>
&lt;p>And that&amp;rsquo;s the part I&amp;rsquo;m really proud of. It&amp;rsquo;s not much code, but it&amp;rsquo;s nice and cohesive and, well, doesn&amp;rsquo;t crumble.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">notify&lt;/span>(&lt;span style="color:#a6e22e">mill&lt;/span>, &lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">content&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;NOTIFICATION_EMAIL_SEND&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">password&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;NOTIFICATION_EMAIL_SEND_PASSWORD&amp;#34;&lt;/span>)
&lt;span style="color:#a6e22e">receiver&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;NOTIFICATION_EMAIL_RECEIVER&amp;#34;&lt;/span>)}
&lt;span style="color:#a6e22e">smtpServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">smtpServer&lt;/span>{&lt;span style="color:#a6e22e">host&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;smtp.gmail.com&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">port&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;587&amp;#34;&lt;/span>}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">SHIPTON&lt;/span> {
&lt;span style="color:#a6e22e">message&lt;/span> = []byte(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;shipton mill has changed something!\n\npreviously: %v\nnow: %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">content&lt;/span>))
}
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">mill&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">MATTHEWS&lt;/span> {
&lt;span style="color:#a6e22e">message&lt;/span> = []byte(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;matthews mill has changed something!\n\n%vpreviously: %v\nnow: %v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">content&lt;/span>))
}
&lt;span style="color:#a6e22e">auth&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">smtp&lt;/span>.&lt;span style="color:#a6e22e">PlainAuth&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>, &lt;span style="color:#a6e22e">password&lt;/span>, &lt;span style="color:#a6e22e">smtpServer&lt;/span>.&lt;span style="color:#a6e22e">host&lt;/span>)
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">smtp&lt;/span>.&lt;span style="color:#a6e22e">SendMail&lt;/span>(&lt;span style="color:#a6e22e">smtpServer&lt;/span>.&lt;span style="color:#a6e22e">Address&lt;/span>(), &lt;span style="color:#a6e22e">auth&lt;/span>, &lt;span style="color:#a6e22e">from&lt;/span>, &lt;span style="color:#a6e22e">receiver&lt;/span>, &lt;span style="color:#a6e22e">message&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, what&amp;rsquo;s going on here? I&amp;rsquo;m getting my &lt;code>NOTIFICATION_EMAIL&lt;/code> send address and password and the &lt;code>RECEIVER&lt;/code>. Host is pre-set (might be abstracted to environmental variables as well maybe&amp;hellip;); I&amp;rsquo;m parsing my &lt;code>mill&lt;/code> input to get the host only (just for having nicer emails) and then I&amp;rsquo;m just sending the email with both the memorized state and the current state of the site. Easy-peasy!&lt;/p>
&lt;p>Actually, a lot of this is in-built and ready for you in Go, which makes this even more fun!&lt;/p>
&lt;h2 id="have-you-bought-the-flour-yet">Have you bought the flour yet?&lt;/h2>
&lt;p>Well, no. For the first few days, I actually forgot to run it&amp;hellip;&lt;/p>
&lt;p>Will this code change the world? Probably not.&lt;/p>
&lt;p>Will this code change my baking game? Probably yes!&lt;/p>
&lt;h2 id="can-i-use-that">Can I use that?&lt;/h2>
&lt;p>Of course you can - go to my github &lt;a href="https://github.com/youshy/bready-steady-go">HERE&lt;/a>. All input and ideas and stars are more than welcome!&lt;/p>
&lt;p>Hope to see you all when the world goes back to having bread flour in every shop! Meanwhile, stay safe, stay strong, &lt;a href="https://staythefuckhome.com/">stay the fuck home!&lt;/a>&lt;/p></content></item><item><title>Tales of Docker and Go Part I</title><link>/blog/tales-of-docker-and-go-part-i/</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate><guid>/blog/tales-of-docker-and-go-part-i/</guid><description>Yes, yes, I know, this is not a proper blog if I don&amp;rsquo;t post often. But hey, that&amp;rsquo;s the name of the game, when you&amp;rsquo;re working on fun stuff!
Talking about fun stuff - have you ever tried to dockerize your Go app? Probably it&amp;rsquo;s easy, there&amp;rsquo;s a ton of Medium posts on how to do that. But what to do when one of your packages is behind the private organisation?</description><content>&lt;p>Yes, yes, I know, this is not a proper blog if I don&amp;rsquo;t post often. But hey, that&amp;rsquo;s the name of the game, when you&amp;rsquo;re working on fun stuff!&lt;/p>
&lt;p>Talking about fun stuff - have you ever tried to dockerize your Go app? Probably it&amp;rsquo;s easy, there&amp;rsquo;s a ton of Medium posts on how to do that. But what to do when &lt;strong>one of your packages is behind the private organisation&lt;/strong>?&lt;/p>
&lt;h2 id="how-to-dockerize-an-app-which-uses-private-libraries">How to dockerize an app which uses private libraries?&lt;/h2>
&lt;p>Well, that was a thing, that took me a few days to figure out. I&amp;rsquo;m not a Docker master, and I&amp;rsquo;m more than 100% sure, that it can be done sexier than this. Ok, let&amp;rsquo;s go!&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#75715e"># Part I&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> alpine/git AS prebuild&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /go/src/github.com/&amp;lt;package&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_USERNAME&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_PASSWORD&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> git clone https://&lt;span style="color:#e6db74">${&lt;/span>GIT_USERNAME&lt;span style="color:#e6db74">}&lt;/span>:&lt;span style="color:#e6db74">${&lt;/span>GIT_PASSWORD&lt;span style="color:#e6db74">}&lt;/span>@your.private.git/and/amazing/package&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Part II&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:1.13.8-alpine&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk add git&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> --from&lt;span style="color:#f92672">=&lt;/span>prebuild /go/src/github.com /go/src/github.com&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> . .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go get -d -v&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go build -o your-app .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 6661&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;./your-app&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, as you probably can see, I&amp;rsquo;m not using &lt;em>go modules&lt;/em>. Well, it&amp;rsquo;s my private thing (had more problems than solved issues with them, so until they&amp;rsquo;re not in better shape&amp;hellip;) so I&amp;rsquo;m going with oldschool approach and doing &lt;code>go get&lt;/code> myself. Let&amp;rsquo;s dive into separate parts then!&lt;/p>
&lt;h2 id="part-i---get-the-private-repo">Part I - Get the private repo&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> alpine/git AS prebuild&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /go/src/github.com/ecs-digital/Smart-Explorer&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_USERNAME&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ARG&lt;/span> GIT_PASSWORD&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> git clone https://&lt;span style="color:#e6db74">${&lt;/span>GIT_USERNAME&lt;span style="color:#e6db74">}&lt;/span>:&lt;span style="color:#e6db74">${&lt;/span>GIT_PASSWORD&lt;span style="color:#e6db74">}&lt;/span>@github.ecs-digital.co.uk/ECSD/ExplorationEngine&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /go/src/github.com/jinzhu&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> git clone -b master https://github.com/jinzhu/gorm.git&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First bit is rather easy - we&amp;rsquo;re using the lightest container that allows us to use &lt;code>git&lt;/code>.&lt;/p>
&lt;p>Now we need to figure out how we can authorize our call to GitHub to get the repo. We could hardcode our &lt;code>GIT_USERNAME&lt;/code> and &lt;code>GIT_PASSWORD&lt;/code> but that&amp;rsquo;s a proper security breach and we don&amp;rsquo;t like it. So, we&amp;rsquo;re passing the &lt;code>username&lt;/code>-&lt;code>password&lt;/code> combo as parameters during the build and by the power of multi-stage build, we&amp;rsquo;re hiding all the keys in the first stage - the only visible thing when doing &lt;code>docker history IMAGE_ID&lt;/code> would be the second part, not the bit when we authorize ourselves!&lt;/p>
&lt;h2 id="part-ii---do-the-rest">Part II - Do the rest&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:1.13.8-alpine&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk add git&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> --from&lt;span style="color:#f92672">=&lt;/span>prebuild /go/src/github.com /go/src/github.com&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /app&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> . .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go get -d -v&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go build -o your-app .&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 6661&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;./your-app&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The rest is rather standard - get &lt;code>git&lt;/code> in our container to allow &lt;code>go get&lt;/code> to work, we&amp;rsquo;re copying pre-stage build (look at the &lt;code>prebuild&lt;/code> tag) and building our app! Simple as that!&lt;/p>
&lt;h2 id="is-it-worth-it">Is it worth it?&lt;/h2>
&lt;p>Well, yes. If you&amp;rsquo;re working in an organisation that has it&amp;rsquo;s own private repos, this might be your salvation (until &lt;code>go modules&lt;/code> will work it out and allow us to authenticate&amp;hellip;).&lt;/p>
&lt;p>If you have any questions, or you maybe see something fixable here - get me on Twitter @arturkondas - I&amp;rsquo;m more than hapy to help and to learn new stuff!&lt;/p></content></item><item><title>Colorcode 2019</title><link>/blog/colorcode-2019/</link><pubDate>Mon, 14 Oct 2019 00:00:00 +0000</pubDate><guid>/blog/colorcode-2019/</guid><description>Personally, I believe in surrounding myself with people who do something good and/or are experts in what they do and/or are just good human beings. This way, the bar I set for myself with what I do and how I do it, is gradually coming up. And that&amp;rsquo;s what happened last Friday.
For the second time in a row, I was asked to do a workshop at ColorInTech&amp;rsquo;s event - ColorCode.</description><content>&lt;p>Personally, I believe in surrounding myself with people who do something good and/or are experts in what they do and/or are just good human beings. This way, the bar I set for myself with what I do and how I do it, is gradually coming up. And that&amp;rsquo;s what happened last Friday.&lt;/p>
&lt;p>For the second time in a row, I was asked to do a workshop at ColorInTech&amp;rsquo;s event - ColorCode. For those who doesn&amp;rsquo;t know what that is - ColorInTech is a nonprofit that tries to make the tech industry more diverse and inclusive (which is a thing that I agree with more than anything). ColorCode is one of their programs, which is basically a day (or two) of workshops, presentations and awesome things aimed at the young professionals to show them what&amp;rsquo;s available for them in tech.&lt;/p>
&lt;p>This year, I came up with an idea to do a Hack-Into-Something-kinda workshop. So, we hacked our way into &lt;a href="hackthebox.eu">hackthebox&lt;/a> (which is an amazing service, check it out!) - we literally hacked our way, because the whole trick with htb is to get an access code in order to hack more things. And we also DDOS&amp;rsquo;ed the service for a second&amp;hellip;&lt;/p>
&lt;p>Without getting into too much details, I have to say, it was one of the nicest events I had an honour to be a part of - big &lt;strong>High-5&lt;/strong> to &lt;strong>Ashleigh&lt;/strong>, &lt;strong>Millie&lt;/strong> and &lt;strong>Dion&lt;/strong> for making the event so smooth, &lt;strong>H5&amp;rsquo;s&lt;/strong> to every and each volunteer, who helped with the event; &lt;strong>H5&amp;rsquo;s&lt;/strong> to &lt;strong>Google&lt;/strong>, &lt;strong>Facebook&lt;/strong> and &lt;strong>EA Games&lt;/strong> for having amazign stands with amazing tech. And most important - &lt;strong>BIG HIGH-FIVES&lt;/strong> to all students for willing to learn a new thing and maybe, just maybe, finding their way in the tech world.&lt;/p>
&lt;p>If you want to go through the workshop yourself - go &lt;a href="https://github.com/youshy/talks/tree/master/colorcode-2019">here&lt;/a>&lt;/p>
&lt;p>If you need to ask me any questions - &lt;em>@arturkondas&lt;/em> on &lt;a href="https://twitter.com/arturkondas">Twitter&lt;/a>&lt;/p>
&lt;p>See you @ ColorCode20!&lt;/p></content></item><item><title>Do stuff for fun</title><link>/blog/do-stuff-for-fun/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><guid>/blog/do-stuff-for-fun/</guid><description>Well, we all have to start somewhere. If you read any, literally any blog post or Medium article about &amp;ldquo;How to be a super coder and earn TONS OF MONEY FAST&amp;rdquo;, everyone will say
Write something that will showcase your skills. And, probably, the main thing is that they&amp;rsquo;ll show you how to build your first blog page or anything like this.
Fast forward a few months You end up in a place I&amp;rsquo;ve been in (and almost anyone I know was) - what to do next?</description><content>&lt;h2 id="well-we-all-have-to-start-somewhere">Well, we all have to start somewhere.&lt;/h2>
&lt;p>If you read any, literally any blog post or Medium article about &amp;ldquo;How to be a super coder and earn TONS OF MONEY FAST&amp;rdquo;, everyone will say&lt;/p>
&lt;h3 id="write-something-that-will-showcase-your-skills">Write something that will showcase your skills.&lt;/h3>
&lt;p>And, probably, the main thing is that they&amp;rsquo;ll show you how to build your first blog page or anything like this.&lt;/p>
&lt;h2 id="fast-forward-a-few-months">Fast forward a few months&lt;/h2>
&lt;p>You end up in a place I&amp;rsquo;ve been in (and almost anyone I know was) - what to do next? You start googling for &amp;ldquo;projects to build&amp;rdquo; and end up writing something which is boring as hell but teaches you how to use GraphQL or &amp;ldquo;the next big thing&amp;rdquo;.&lt;/p>
&lt;p>But what if&lt;/p>
&lt;h2 id="you-would-write-stuff-just-for-giggles">You would write stuff just for giggles?&lt;/h2>
&lt;p>It doesn&amp;rsquo;t have to be the nicest, cleaniest and neatiest code you&amp;rsquo;ll ever write.&lt;/p>
&lt;p>Heck, it doesn&amp;rsquo;t even have to address a particular, extremely-complicated problem.&lt;/p>
&lt;p>But you&amp;rsquo;ll have fun. A lot.&lt;/p>
&lt;h2 id="next-time-youll-learn-something-new---just-have-fun-with-it">Next time you&amp;rsquo;ll learn something new - just have fun with it!&lt;/h2>
&lt;p>Case in point - I&amp;rsquo;ve been doing Go for a few months now and as a stupid &lt;code>I-don't-want-to-leave-my-command-line-ever&lt;/code> reason, I wrote a &lt;a href="github.com/youshy/wiki">wiki&lt;/a> that allows me for fetching knowledge from Wikipedia. It was surprisingly tricky to build, due to data structure of WikiAPI.&lt;/p>
&lt;p>Another one - this post is written using my &lt;a href="github.com/youshy/nju">small package&lt;/a> that preps the file for me, opens up &lt;code>vim&lt;/code> and allows me to stream from my head super easily and fast. And then it commits this post. And I still haven&amp;rsquo;t left my command line!&lt;/p>
&lt;p>You can extend this approach to anything that you do. Literally - if you like pizza, learn how to make one. A few of those will be surprisingly bad, but one of these will rock your world. And then you have another party skill!&lt;/p>
&lt;hr>
&lt;p>Do stuff for fun. We only live once, it&amp;rsquo;d be nice to at least have fun!&lt;/p>
&lt;p>&lt;code>Fun&lt;/code> count: 6&lt;/p></content></item><item><title>Automata</title><link>/blog/automata/</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><guid>/blog/automata/</guid><description>Wait, what?
Yes, this post is written with me doing literally the absolute minimum. And also overengineering the solution. Way too much.
Check how here.</description><content>&lt;p>Wait, what?&lt;/p>
&lt;p>Yes, this post is written with me doing literally the absolute minimum. And also overengineering the solution. Way too much.&lt;/p>
&lt;p>Check how &lt;a href="https://github.com/youshy/nju">here&lt;/a>.&lt;/p></content></item><item><title>Obligatory Hello World!</title><link>/blog/obligatory-hello-world/</link><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid>/blog/obligatory-hello-world/</guid><description>I guess there&amp;rsquo;s nothing extra to add here. Hello world!</description><content>&lt;p>I guess there&amp;rsquo;s nothing extra to add here. Hello world!&lt;/p></content></item><item><title/><link>/talks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/talks/</guid><description/><content/></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>Golang developer, open source contributor, teacher &amp;amp; conference speaker.
Also musician, powerlifter, food junkie, electronics tinkerer, amateur craftsman, baker &amp;amp; pizzaiolo.
But mostly human.
All posts are my personal views, not to be associated with my current employeer.
Contact me If you need to talk to me, or just say something - grab me on any of the social medias below!
LinkedIn Twitter</description><content>&lt;p>Golang developer, open source contributor, teacher &amp;amp; conference speaker.&lt;/p>
&lt;p>Also musician, powerlifter, food junkie, electronics tinkerer, amateur craftsman, baker &amp;amp; pizzaiolo.&lt;/p>
&lt;p>But mostly human.&lt;/p>
&lt;p>All posts are my personal views, not to be associated with my current employeer.&lt;/p>
&lt;h3 id="contact-me">Contact me&lt;/h3>
&lt;p>If you need to talk to me, or just say something - grab me on any of the social medias below!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.linkedin.com/in/arturkondas/">LinkedIn&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/arturkondas">Twitter&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Media</title><link>/media/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/media/</guid><description>Apart from writing code as my daily job, I do produce, record, compose and release a lot of music and different stuff. Here you can find a few things I&amp;rsquo;ve been working on so far!
All pics are clickable and will take you places!
Tap3s Spotify
Bandcamp
Tap3s - PS4
Iggy Not Pop x Tap3s - Powiedz Mi Coś Więcej
Iggy Not Pop x Tap3s -&amp;gt; Check more here</description><content>&lt;p>Apart from writing code as my daily job, I do produce, record, compose and release a lot of music and different stuff. Here you can find a few things I&amp;rsquo;ve been working on so far!&lt;/p>
&lt;p>All pics are clickable and will take you places!&lt;/p>
&lt;hr>
&lt;h2 id="tap3s">Tap3s&lt;/h2>
&lt;p>&lt;a href="https://open.spotify.com/artist/11snR6DNci1YazNpAzJzSF?si=1V2DFuoIQ7KOztun5ENDMg">Spotify&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://tap3s.bandcamp.com/">Bandcamp&lt;/a>&lt;/p>
&lt;p>Tap3s - PS4&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=xW_buHhVFqw" title="Tap3s - PS4">&lt;img src="http://img.youtube.com/vi/xW_buHhVFqw/0.jpg" alt="Tap3s - PS4">&lt;/a>&lt;/p>
&lt;p>Iggy Not Pop x Tap3s - Powiedz Mi Coś Więcej&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=seUh9RCKXiM" title="Iggy Not Pop x Tap3s - Powiedz Mi Coś Więcej">&lt;img src="http://img.youtube.com/vi/seUh9RCKXiM/0.jpg" alt="Iggy Not Pop x Tap3s - Powiedz Mi Coś Więcej">&lt;/a>&lt;/p>
&lt;p>Iggy Not Pop x Tap3s -&amp;gt; &lt;a href="https://id.ffm.to/powiedzmicos">Check more here&lt;/a>&lt;/p>
&lt;p>Tap3s is a musical partnership between me and my good mate Bartek. We do a lot of alternative sounds. Literally a lot!&lt;/p>
&lt;hr>
&lt;h2 id="ogród">Ogród&lt;/h2>
&lt;p>&lt;a href="https://open.spotify.com/artist/08GCf4AAuCcRxJN32DaFs0?si=nP8ZnJ-6QA-KZ_zcdtWISg">Spotify&lt;/a>&lt;/p>
&lt;p>Ogród - Smog City&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=DNssZeG_0Qg" title="Ogród - Smog City">&lt;img src="http://img.youtube.com/vi/DNssZeG_0Qg/0.jpg" alt="Ogród - Smog City">&lt;/a>&lt;/p>
&lt;p>Ogród - Nocny Lot&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=w-QOgWvcgig" title="Ogród - Nocny Lot">&lt;img src="http://img.youtube.com/vi/w-QOgWvcgig/0.jpg" alt="Ogród - Nocny Lot">&lt;/a>&lt;/p>
&lt;p>That was my songwriter/producer outlet. Both songs are composed, arranged, recorded (apart from vocals) and mixed by me.&lt;/p>
&lt;hr>
&lt;p>Everything below the line here is VERY old stuff but I&amp;rsquo;m very proud of it!&lt;/p>
&lt;hr>
&lt;h2 id="ego-trip--prawo-głosu">Ego Trip / Prawo Głosu&lt;/h2>
&lt;p>Ego Trip - Miasto Nocą&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=Arxd0zraGDs" title="Ego Trip - Miasto Nocą">&lt;img src="http://img.youtube.com/vi/Arxd0zraGDs/0.jpg" alt="Ego Trip - Miasto Nocą">&lt;/a>&lt;/p>
&lt;h4 id="ego-trips-full-albumhttpswwwyoutubecomplaylistlistplywwxnjsxt2sm3xefbhzw2jcwpldbvhfj">&lt;a href="https://www.youtube.com/playlist?list=PLywWxNJsXt2Sm3XeFBhZW2JCWplDbVhFJ">Ego Trip&amp;rsquo;s Full Album&lt;/a>&lt;/h4>
&lt;p>(Honestly I didn&amp;rsquo;t even know it existed)&lt;/p>
&lt;p>For the curious ones - Ego Trip was a band I played with in Polish edition of Must Be The Music. We even got to the finals! I&amp;rsquo;ll leave this breadcrumb for you to follow&amp;hellip;&lt;/p>
&lt;p>Prawo Głosu&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=SGs3KmO5ejM" title="Prawo Głosu">&lt;img src="http://img.youtube.com/vi/SGs3KmO5ejM/0.jpg" alt="Prawo Głosu">&lt;/a>&lt;/p>
&lt;p>(and some live stuff)&lt;/p>
&lt;p>Prawo Głosu Live&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=5ZIxLsQzgi4" title="Prawo Głosu Live">&lt;img src="http://img.youtube.com/vi/5ZIxLsQzgi4/0.jpg" alt="Prawo Głosu Live">&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="sunrise-hunters">Sunrise Hunters&lt;/h2>
&lt;p>Sunrise Hunters EP&lt;/p>
&lt;p>&lt;a href="http://www.youtube.com/watch?v=_20T4qx6jxY" title="Sunrise Hunters EP">&lt;img src="http://img.youtube.com/vi/_20T4qx6jxY/0.jpg" alt="Sunrise Hunters EP">&lt;/a>&lt;/p>
&lt;p>Literally the first EP I have ever recorded in a pro studio. All songs written and arranged by me.&lt;/p></content></item><item><title>Open Source</title><link>/opensource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/opensource/</guid><description>My open-source contributions (both current and past):
Rod - go-rod/rod Grafana - grafana/grafana Beep - faiface/beep Gorm - go-gorm/gorm (translation) Unshaky aahung/Unshaky (translation) Rectangle rxhanson/Rectangle (translation) Microsoft Visual Studio Code (translation)</description><content>&lt;p>My open-source contributions (both current and past):&lt;/p>
&lt;ul>
&lt;li>Rod - &lt;a href="https://github.com/go-rod/rod">go-rod/rod&lt;/a>&lt;/li>
&lt;li>Grafana - &lt;a href="https://github.com/grafana/grafana">grafana/grafana&lt;/a>&lt;/li>
&lt;li>Beep - &lt;a href="https://github.com/faiface/beep">faiface/beep&lt;/a>&lt;/li>
&lt;li>Gorm - &lt;a href="https://github.com/go-gorm/gorm">go-gorm/gorm&lt;/a> (translation)&lt;/li>
&lt;li>Unshaky &lt;a href="https://github.com/aahung/Unshaky">aahung/Unshaky&lt;/a> (translation)&lt;/li>
&lt;li>Rectangle &lt;a href="https://github.com/rxhanson/Rectangle">rxhanson/Rectangle&lt;/a> (translation)&lt;/li>
&lt;li>Microsoft Visual Studio Code (translation)&lt;/li>
&lt;/ul></content></item></channel></rss>